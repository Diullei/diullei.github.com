{"id":"7","title":"Debugando TypeScript no navegador","by":"Diullei Gomes","tags":["TypeScript","OO","JavaScript","Pattern","Microsoft"],"category":"JavaScript","date":1350356400000,"deploy":"true","content":"## Introduçãos\r\n\r\nExiste um recurso bem interessante implementado no Fire Fox e no Chrome chamado [Source Maps](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/). Para entender do que se trata tenha em mente um arquivo javascript minificado. Para rastrear um bug no código deste arquivo por exemplo teríamos que usar a versão não minificada do mesmo. Uma vez encontrado o bug este seria corrigido e um novo arquivo minificado seria gerado. Um Source Map é um arquivo de mapeamento que faz um dê-para (no nosso caso) do arquivo minificado com o arquivo real. A partir deste mapeamento o browser consegue realizar o debug no arquivo original(não minificado) em bora a execução real esteja ocorrendo no arquivo minificado.\r\n\r\nAté aqui isso não agregou muito por que basta referenciar o arquivo original como dito anteriormente. Uma vez que tenhamos o problema rastreado ou a feature implementada minificamos tudo novamente.\r\n\r\n### Como isso pode nos ajudar no Debug de código TypeScript?\r\n\r\nTypeScrit assim como CoffeeScrit e Dart entre outros são pré-processadores que geram no final das contas código JavaScript. Como a maioria dos pré-processadores tenta melhorar a sintaxe do código na escrita de expressões lambda, iterações, classes, interfaces, heranças e etc, temos uma dissonância entre o código escrito em TypeScript por exemplo com o código JavaScript gerado no final.\r\n\r\nAqui entra em ação o Source Map. Com ele assim como podemos mapear um arquivo minificado com seu arquivo original, podemos também mapear um arquivo TypeScript original com seu código final gerado em JavaScript. Isso abre novas possibilidades de debug. Novas ferramentas de debug e refatoração podem ser criadas a partir deste recurso.\r\n\r\nÉ aí que entra o assunto deste artigo. Vou mostrar como debugar TypeScript em um navegador com suporte a Source Maps. No meu caso vamos usar o Chrome.\r\n\r\n## Habilitando Source Map no Google Chrome\r\n\r\nPara habilitar o recurso de source maps no Chrome basta acessar Settings e selecionar a caixa \"Enable source maps\". Veja na imagem abaixo:\r\n\r\n![Valid XHTML](/blog/img/debug_typescript/enable_source_map.png)\r\n\r\nFeito isso estamos pronto para debugar nosso código.\r\n\r\n## Criando o nosso código de testes\r\n\r\nPara exemplo vamos criar um arquivo com um código TypeScript muito simples. Salve o código abaixo em um arquivo chamado ```script.ts```.\r\n\r\n<pre style=\"javascript\"><code>interface IPessoa{\r\n\tnome: string;\r\n\tsobreNome: string;\r\n\tnomeCompleto: () => string;\r\n}\r\n\r\nclass Pessoa implements IPessoa {\r\n\tnome: string;\r\n\t\r\n\tsobreNome: string;\r\n\r\n\tnomeCompleto(): string {\r\n\t\treturn \"Nome: \" + this.nome + \" \" + this.sobreNome;\r\n\t}\r\n}\r\n\r\nvar pessoa = new Pessoa();\r\npessoa.nome = \"Diullei\";\r\npessoa.sobreNome = \"Gomes\";\r\n\r\nvar element = document.getElementById('content');\r\n\r\nelement.innerHTML = pessoa.nomeCompleto();</code></pre>\r\n\r\nAgora crie um arquivo chamado ```index.html``` e coloque o código abaixo:\r\n\r\n<pre class=\"html\"><code>&lt;!DOCTYPE HTML&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n\t&lt;meta&gt;\r\n\t&lt;title&gt;&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\t&lt;div id=\"content\"&gt;&lt;/div&gt;\r\n\t&lt;script type=\"text/javascript\" src=\"script.js\"&gt;&lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\nEstes arquivos precisam estar no mesmo folder.\r\n\r\n## Source Maps para TypeScript\r\n\r\nTendo nosso pequeno projeto em mãos agora precisamos gerar nosso arquivo source map. Felizmente o time que trabalha no TypeScript fez um trabalho muito bom incluindo um gerador de source maps no [compilador do TypeScript](http://typescript.codeplex.com/SourceControl/changeset/view/d397c54a55db#src%2fcompiler%2fsourceMapping.ts). Embora não seja documentado no help do utilitário de compilação do TypeScript para gerar o arquivo sourcemap basta executar a compilação da seguinte forma: ```tsc --sourcemap script.ts```. Feito isso repare que um arquivo chamado ```script.js.map``` é gerado. Repare também que este arquivo é referenciado no final do arquivo script.js gerado pelo compilador como na linha abaixo:\r\n\r\n```//@ sourceMappingURL=script.js.map```\r\n\r\nTendo compilado o arquivo script.ts agora basta abrir a página ```index.html``` no Chrome. Coloque um breakpoint no código para ver o debug do TypeScript em ação. Veja na imagem abaixo:\r\n\r\n![Valid XHTML](/blog/img/debug_typescript/debug.png)\r\n\r\n## Conclusão\r\n\r\nComo vimos o recurso Source Maps abre muitas possibilidades no tocante a rastreamento de código. Espero que esse recurso seja cada vez mais aprimorado e incorporado e explorado.\r\n\r\n* Para saber mais sobre Source Maps acesse [http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/)\r\n* Para saber mais sobre TypeScript acesse [http://diullei.github.com/TypeScript-ptBR/](http://diullei.github.com/TypeScript-ptBR/)\r\n\r\nUm grande abraço e até a próxima!\n","ref":"usando_source_maps_com_typescript.post.mkdown"}