<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Operador keyof]]></title>
      <url>http://diullei.com/2017/03/31/keyof/</url>
      <content type="html"><![CDATA[<p>Por ser uma linguagem dinâmica, o JavaScript algumas vezes torna difícil a representação de algumas operações em um sistema tipado. Por exemplo, vejamos a seguinte função:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prop</span>(<span class="params">obj, propertyName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[propertyName];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Essa função aceita um objeto e um nome de propriedade e retorna o valor correspondente desta propriedade. É importante observar que diferentes propriedades em um objeto possuem diferentes tipos. Com isso em mente, como podemos definir o tipo de retorno desta função?</p>
<p>Vamos a uma primeira tentativa:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prop</span>(<span class="params">obj: &#123;&#125;, propertyName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[propertyName];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Adicionamos 2 anotações <code>obj: {}, propertyName: string</code>. Com isso estamos dizendo que <code>obj</code> precisa ser um objeto e que <code>propertyName</code> precisa ser do tipo string. </p>
<p>Agora como definir o tipo de retorno desta função?</p>
<p>Vamos a um exemplo prático:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prop</span>(<span class="params">obj: &#123;&#125;, propertyName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[propertyName];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myObj = &#123;</span><br><span class="line">    strProp: <span class="string">'str value'</span>,</span><br><span class="line">    boolProp: <span class="literal">true</span>,</span><br><span class="line">    numberProp: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> val1 = prop(myObj, <span class="string">'strProp'</span>); <span class="comment">// tipo de retorno 'any'</span></span><br><span class="line"><span class="keyword">const</span> val2 = prop(myObj, <span class="string">'boolProp'</span>); <span class="comment">// tipo de retorno 'any'</span></span><br><span class="line"><span class="keyword">const</span> val3 = prop(myObj, <span class="string">'numberProp'</span>); <span class="comment">// tipo de retorno 'any'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> val4 = prop(myObj, <span class="string">'xyz'</span>); <span class="comment">// irá falhar em tempo de execução. </span></span><br><span class="line">                                 <span class="comment">// xyz não é uma propriedade válida neste objeto</span></span><br></pre></td></tr></table></figure>
<p>Para qualquer propriedade existente que pasemos o retorno será inferido como sendo do tipo <code>any</code>. Para o caso de passar uma propriedade inexistente teremos um erro em tempo de execução.</p>
<p>Isso ocorre por que neste caso o compilador do TypeScript não consegue prever de antemão quais possíveis objetos serão passados como argumento para <code>prop(...)</code> e com isso não é possível inferir o tipo de retorno.</p>
<p>Para fazer com que o compilador reconheça o tipo de <code>obj</code> poderíamos ajustar o código da seguinte forma:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prop</span>&lt;<span class="title">T</span>&gt;(<span class="params">obj: T, propertyName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[propertyName];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Note que estamos utilizando um tipo genérico que será inferido no momento em que um objeto for passado em <code>obj</code>. Mesmo com esse ajuste, seguimos não alcançando o resultado esperado. Embora agora o compilador entenda o tipo de <code>obj</code> ele continua não sabendo se <code>propertyName</code> realmente existe em <code>obj</code> e, caso exista, qual o seu tipo.</p>
<p>Ok, vamos supor agora em um outro exemplo que sabemos de antemão o tipo exato que será passado para a função <code>prop(...)</code>. Suponha que tenhamos uma interface com a seguinte estrutura:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> MyInterface &#123;</span><br><span class="line">    id: <span class="built_in">number</span>;</span><br><span class="line">    text: <span class="built_in">string</span>;</span><br><span class="line">    due: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Para entender melhor o próximo exemplo de código precisamos relembrar outras duas funcionalidades importantes:</p>
<ul>
<li><strong>Union types</strong> - Permite informar se um objeto pode ser um ou mais tipos diferentes. <a href="/2016/07/13/union-types/">Veja mais</a>.</li>
<li><strong>String literal</strong> - Permite definir quais valores um objeto do tipo string pode assumir. <a href="https://github.com/Microsoft/TypeScript/pull/5185" target="_blank" rel="noopener">Veja mais</a>.</li>
</ul>
</blockquote>
<p>Vamos reescrever a função da seguinte forma:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prop</span>(<span class="params">obj: MyInterface, propertyName: <span class="string">"id"</span> | <span class="string">"text"</span> | <span class="string">"due"</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[propertyName];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Vejamos o que temos até agora. Com essa mudança tentarmos passar uma propriedade que não existe na interface <code>MyInterface</code>, ou seja, que não esteja no tipo <code>&quot;id&quot; | &quot;text&quot; | &quot;due&quot;</code>, teremos um erro em tempo de compilação.</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> val4 = prop(myObj, <span class="string">'xyz'</span>); <span class="comment">// erro! 'xyz' não pertende ao tipo "id" | "text" | "due"</span></span><br></pre></td></tr></table></figure>
<p>Isso é bom, resolve parte do problema, mas também nos gera um novo problema. Agora estamos protegendo o valor de <code>propertyName</code> definindo o que realmente pode ser passado mas continuamos não tendo como prever o tipo de <code>obj</code> e as possíveis propriedades de <code>obj</code> em <code>propertyName</code>. Nessa função precisa ser genérica, ou seja, funcionar em todos os casos e não somente para o tipo <code>MyInterface</code>.</p>
<h2 id="Solucao"><a href="#Solucao" class="headerlink" title="Solução"></a>Solução</h2><p>Para resolver este tipo de problema foi acrescentado na versão 2.1 do TypeScript o operador <code>keyof</code>. O objetivo deste operador é retornar um “union type” de “string literals” representando o nome de cada propriedade do tipo em que estamos aplicando o <code>keyof</code>. Confuso não? </p>
<p>Vamos a um exemplo para entender melhor. Utilizando a mesma interface do exemplo anterior, podemos utilizar o operador <code>keyof</code> para retornar um tipo que represente um “union type” de “string literals” com a combinação dos nomes das propriedades de <code>MyInterface</code>:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInterfaceKeys = keyof MyInterface;  <span class="comment">// "id" | "text" | "due"</span></span><br></pre></td></tr></table></figure>
<p>Isso equivale ao mesmo que escrever:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInterfaceKeys = <span class="string">"id"</span> | <span class="string">"text"</span> | <span class="string">"due"</span>;</span><br></pre></td></tr></table></figure>
<p>Mas em alguns casos precisamos que isso seja feito de forma dinâmica sendo recuperado direto de uma dada interface e por isso nesses casos utilizaremos o <code>keyof</code>.</p>
<p>Com base no que acabou de ser apresentado, vamos alterar a função <code>prop(...)</code> da seguinte forma:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prop</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> (<span class="params">keyof T</span>)&gt;(<span class="params">obj: T, propertyName: K</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[propertyName];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OK, vamos entender as modificações parte a parte:</p>
<ul>
<li>Como demonstrado em um exemplo anterior, estamos utilizando um tipo genérico (<code>T</code>) para inferir o tipo de <code>obj</code> em tempo de compilação.</li>
<li>Baseado também em exemplos anteriores, estamos utilizando <code>keyof T</code> para recuperar um tipo que represente os possíveis nomes de propriedades de <code>T</code> (repare que estamos colocando <code>keyof</code> entre parêntesis no exemplo só pra facilitar a leitura, no entanto esses parêntesis não são necessários).</li>
<li>Estamos definindo um outro tipo genérico <code>K</code> para extender o tipo gerado por <code>keyof T</code>.</li>
</ul>
<p>Com base nessas informações, agora o compilador consegue inferir que o retorno de <code>prop(...)</code> é <code>T[K]</code>, e outras palavras, é o tipo resultante da aplicação da propriedade <code>K</code> no objeto <code>T</code>, e com isso agora temos o retorno da função inferido da forma correta correspondente ao tipo da propriedade solicitada.</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prop</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> (<span class="params">keyof T</span>)&gt;(<span class="params">obj: T, propertyName: K</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[propertyName];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myObj = &#123;</span><br><span class="line">    strProp: <span class="string">'str value'</span>,</span><br><span class="line">    boolProp: <span class="literal">true</span>,</span><br><span class="line">    numberProp: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> val1 = prop(myObj, <span class="string">'strProp'</span>); <span class="comment">// retorna 'string'</span></span><br><span class="line"><span class="keyword">const</span> val2 = prop(myObj, <span class="string">'boolProp'</span>); <span class="comment">// retorna 'boolean'</span></span><br><span class="line"><span class="keyword">const</span> val3 = prop(myObj, <span class="string">'numberProp'</span>); <span class="comment">// retorna 'number'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> val4 = prop(myObj, <span class="string">'xyz'</span>); <span class="comment">// irá falhar em tempo de compilação. </span></span><br><span class="line">                                 <span class="comment">// Argument of type '"xyz"' is not assignable to </span></span><br><span class="line">                                 <span class="comment">// parameter of type '"strProp" | "boolProp" | "numberProp"'.</span></span><br></pre></td></tr></table></figure>
<p>Excelente não? Isso nos ajuda a prevenir uma série de erros. Esta é só uma das formas de aplcação deste operador. Um bom exemplo pode ser encontrado no arquivo <code>lib.es2017.object.d.ts</code> que é instalado junto com o compilador do TypeScript:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ObjectConstructor &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    entries&lt;T <span class="keyword">extends</span> &#123; [key: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;, K <span class="keyword">extends</span> keyof T&gt;(o: T): [keyof T, T[K]][];</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Essa interface é utilizada para definir o tipo da função <a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/entries" target="_blank" rel="noopener"><code>Object.entries()</code></a>, onde o retorno é um array com de pares de valores contendo <code>[propertyName, value]</code> para um dado objeto.</p>
<blockquote>
<p>Reference: TS v2.1 <a href="https://github.com/Microsoft/TypeScript/pull/11929" target="_blank" rel="noopener">https://github.com/Microsoft/TypeScript/pull/11929</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
            <category> TypeScript v2.1 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TypeScript - Decorators]]></title>
      <url>http://diullei.com/2016/11/21/Decorators-TypeScript/</url>
      <content type="html"><![CDATA[<p>Fala pessoal! Hoje vou falar sobre uma feature muito legal <code>decorators</code>. Utilizamos decorators para inserir metadados e comportamentos em uma declaração de classe, propriedade, métodos ou parâmetro de uma função. Trata-se de uma função com uma assunatura específica (de acordo com o <code>target</code>).</p>
<p>Para utilizar um decorator precisamos utilizar o simbolo <code>@</code> junto com o nome do decorator antes do membro do código que estivermos decorando. Exemplo:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> MyClass &#123;</span><br><span class="line">    <span class="meta">@log</span></span><br><span class="line">    doSomething(arg) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>NOTA: para utilizar esse recurso é necessário configurar a propriedade <code>experimentalDecorators</code> no arquivo <code>tsconfig.json</code>. Para compilar o arquivo via linha de comando utilize: <code>tsc myFile.ts –target ES5  –emitDecoratorMetadata</code>.</p>
</blockquote>
<h2 id="Pontos-importantes"><a href="#Pontos-importantes" class="headerlink" title="Pontos importantes"></a>Pontos importantes</h2><ul>
<li><p>Os decorators são sempre chamados quando uma classe é declarada e não quando um objeto é instanciado.</p>
</li>
<li><p>Multiplos decorators podem ser declarados para um mesmo target.</p>
</li>
<li><p>não é permitida a utilização de decorators em construtores.</p>
</li>
<li><p>Os decorators podem ser do tipo: <code>ClassDecorator</code>, <code>PropertyDecorator</code>, <code>MethodDecorator</code> ou <code>ParameterDecorator</code>.</p>
</li>
</ul>
<h2 id="Decorators-em-Metodos"><a href="#Decorators-em-Metodos" class="headerlink" title="Decorators em Métodos"></a>Decorators em Métodos</h2><p>Para definir um decorator para um méroto precisamos criar uma função com os seguintes parâmetros:</p>
<ul>
<li><p><code>target</code> - Protótipo da classe que possui o método.</p>
</li>
<li><p><code>propertyKey</code> - Nome do método em que estamos aplicando o decorator. Pode ser um <code>string</code> ou um <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="noopener"><code>Symbol</code></a></p>
</li>
<li><p><code>descriptor</code> - Uma instância da insterface <a href="https://github.com/Microsoft/TypeScript/blob/727b9a9ceb37c77ba5b69c452cc118a8913d9cf2/src/lib/core.d.ts#L1241" target="_blank" rel="noopener"><code>TypedPropertyDescriptor</code></a></p>
</li>
</ul>
<p>No primeiro exemplo eu utilizei um decorator chamado <code>@log</code>. Vamos ver uma possível implementação deste decorator:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">target: <span class="built_in">Object</span>, propertyKey: <span class="built_in">string</span>, descriptor: TypedPropertyDescriptor&lt;<span class="built_in">any</span>&gt;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> originalMethod = descriptor.value; <span class="comment">// salvando uma referência para o método original</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> não use arrou fynction. Utilize uma declaração normal de função para que o contexto `this` seja interpretado corretamente.</span></span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params">...args: <span class="built_in">any</span>[]</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Argumentos da chamada: "</span> + <span class="built_in">JSON</span>.stringify(args));</span><br><span class="line">        <span class="keyword">let</span> result = originalMethod.apply(<span class="keyword">this</span>, args);               <span class="comment">// Executa a função e armazena o resultado</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Valor de retorno: "</span> + result);               </span><br><span class="line">        <span class="keyword">return</span> result;                                               <span class="comment">// retorna o resultado</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Chamando a função:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> MyClass &#123;</span><br><span class="line">    <span class="meta">@log</span></span><br><span class="line">    doSomething(arg) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Message -- "</span> + arg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> MyClass().doSomething(<span class="string">"test"</span>);</span><br><span class="line"><span class="comment">// =&gt; Argumentos da chamada: ["test"]</span></span><br><span class="line"><span class="comment">// =&gt; Valor de retorno: Message -- test</span></span><br></pre></td></tr></table></figure>
<p>Agora que vimos como uma declaração simples de decorator funciona vamos entender como declarar decorators que esperam parâmetros. Para isso precisamos declarar uma função com a assinatura de parâmetros desejado e retornar uma outra função com a mesma assinatura do exemplo anterior. Veja o seguinte código:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">showArgs: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target: <span class="built_in">Object</span>, propertyKey: <span class="built_in">string</span>, descriptor: TypedPropertyDescriptor&lt;<span class="built_in">any</span>&gt;</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> originalMethod = descriptor.value; <span class="comment">// salvando uma referência para o método original</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> não use arrou fynction. Utilize uma declaração normal de função para que o contexto `this` seja interpretado corretamente.</span></span><br><span class="line">        descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params">...args: <span class="built_in">any</span>[]</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (showArgs) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"Argumentos da chamada: "</span> + <span class="built_in">JSON</span>.stringify(args));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> result = originalMethod.apply(<span class="keyword">this</span>, args);               <span class="comment">// Executa a função e armazena o resultado</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Valor de retorno: "</span> + result);               </span><br><span class="line">            <span class="keyword">return</span> result;                                               <span class="comment">// retorna o resultado</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> descriptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Mais uma vez vamos chamar a função:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> MyClass &#123;</span><br><span class="line">    <span class="meta">@log</span>(<span class="literal">false</span>)</span><br><span class="line">    doSomething(arg) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Message -- "</span> + arg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> MyClass().doSomething(<span class="string">"test"</span>);</span><br><span class="line"><span class="comment">// =&gt; Valor de retorno: Message -- test</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>NOTA: sempre que utilizarmos uma decorator em uma função estática o target será a propria função ou invés do protótipo da classe.</p>
</blockquote>
<h2 id="Decorators-em-Classes"><a href="#Decorators-em-Classes" class="headerlink" title="Decorators em Classes"></a>Decorators em Classes</h2><p>A assinatura da função que define um decorator para uma classe possui apenas o parâmetro <code>target</code>. Veja o seguinte exemplo:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> __myClassDecoratorMetaData: <span class="built_in">any</span> = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClassDecorator</span>(<span class="params">value: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">Function</span></span>) </span>&#123;</span><br><span class="line">      __myClassDecoratorMetaData[target] = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyClassDecorator</span>(“my metadata”)</span><br><span class="line"><span class="keyword">class</span> MyClass &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myClass = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="keyword">let</span> value: <span class="built_in">string</span> = __myClassDecoratorMetaData[myClass.constructor];</span><br><span class="line"><span class="built_in">console</span>.log(value); <span class="comment">//=&gt; my metadata</span></span><br></pre></td></tr></table></figure>
<p>Existe ainda a possibilidade de adicionar decorators em propriedades e argumentos de função. Tentarei cobrir estas outras duas possibilidades em outro artigo.</p>
<p>Até a próxima!</p>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
            <category> TypeScript v1.5 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery - 10 dicas de performance]]></title>
      <url>http://diullei.com/2016/11/01/jQuery-10-dicas-de-performance/</url>
      <content type="html"><![CDATA[<p>Os anos se passaram e o jQuery continua relevante em pleno 2016. A facilidade de manipulação e a infinidade de artigos na internet ajuda a reforçar a utilização do jQuery e a manter essa biblioteca viva. De fato, poucos anos atrás, escrever codigo compatível com diferentes versões de navegadores seria um trabalho muito árduo se não fosse pelo nosso amigo jQuery.</p>
<p>O grande problema com o jQuery é que muitos desenvolvedores ignoram as boas práticas e escrevem codigo muito pobres em performance (isso sem falar sobre design de código).</p>
<h2 id="Por-que-performance-e-importante"><a href="#Por-que-performance-e-importante" class="headerlink" title="Por que performance é importante?"></a>Por que performance é importante?</h2><p>Vou expor duas boas razões:</p>
<ul>
<li>Uma boa performance pode trazer uma boa experiência de uso. Nem sempre seus visitanes vão lhe dizer que seu site está lento, eles simplesmente não vão voltar a acessar o site.</li>
<li>O Google leva a performance em consideração para a classificação do seu site no PageRank.</li>
</ul>
<p>Então, vamos aos pontos…</p>
<h2 id="1-Use-a-versao-mais-atual-do-jQuery-sempre-que-possivel"><a href="#1-Use-a-versao-mais-atual-do-jQuery-sempre-que-possivel" class="headerlink" title="1. Use a versão mais atual do jQuery sempre que possível"></a>1. Use a versão mais atual do jQuery sempre que possível</h2><p>As novas versões sempre trazem melhorias de performance e atualizações de segurança.</p>
<h2 id="2-Utilize-os-seletores-da-forma-correta"><a href="#2-Utilize-os-seletores-da-forma-correta" class="headerlink" title="2. Utilize os seletores da forma correta"></a>2. Utilize os seletores da forma correta</h2><p>Cada seletor possui uma performance diferente. Organizando do mais rápido para o mais lento temos:</p>
<ul>
<li>Seleção por ID - <code>$(&#39;#element-id&#39;)</code></li>
<li>Seleção por Elemento - <code>$(&#39;form&#39;)</code></li>
<li>Seleção por Classe - <code>$(&#39;.some-class&#39;)</code></li>
<li>Seleção por Pseudo Atributo - <code>$(&#39;[data-attr]&#39;), $(&#39;:hidden&#39;)</code></li>
</ul>
<h2 id="3-O-algoritmo-de-selecao-do-jQuery-funciona-da-esquerda-para-a-direita"><a href="#3-O-algoritmo-de-selecao-do-jQuery-funciona-da-esquerda-para-a-direita" class="headerlink" title="3. O algoritmo de seleção do jQuery funciona da esquerda para a direita"></a>3. O algoritmo de seleção do jQuery funciona da esquerda para a direita</h2><p>Isso significa que o lado direto da query de busca precisa ser o mais específico possivel. Neste caso, queries muito longas acabam não fazendo muito sentido e podem ser evitadas. Exemplo:</p>
<blockquote>
<p>Ruim</p>
</blockquote>
<pre><code>$(&apos;div.page div.block .element&apos;)
</code></pre><blockquote>
<p>Bom</p>
</blockquote>
<pre><code>$(&apos;.page div.element&apos;)
</code></pre><blockquote>
<p>Sempre que possível utilize <em>tag + class</em></p>
</blockquote>
<h2 id="4-Quebre-sua-query-em-blocos-sempre-que-possivel"><a href="#4-Quebre-sua-query-em-blocos-sempre-que-possivel" class="headerlink" title="4. Quebre sua query em blocos sempre que possível"></a>4. Quebre sua query em blocos sempre que possível</h2><p>Seguindo o conceito do item (3) considere os seguintes códigos:</p>
<blockquote>
<p>Ruim</p>
</blockquote>
<pre><code>$(&apos;#container .element&apos;)
</code></pre><blockquote>
<p>Bom</p>
</blockquote>
<pre><code>$(&apos;#container&apos;).find(&apos;.element&apos;)
</code></pre><p>Lembre-se que a busca é sempre feita da direita para a esquerda e por isso, no primeiro exemplo o jQuery irá primeiro buscar por todos os elementos com a classe <code>element</code> e depois filtrar todos os elementos que contenham o id <code>container</code>.</p>
<p>Uma outra sintaxe similar ao método <code>find(...)</code> é:</p>
<pre><code>$(&apos;.element&apos;, &apos;#container&apos;)
</code></pre><h2 id="5-Faca-sempre-um-cache-dos-seus-seletores"><a href="#5-Faca-sempre-um-cache-dos-seus-seletores" class="headerlink" title="5. Faça sempre um cache dos seus seletores"></a>5. Faça sempre um cache dos seus seletores</h2><p>Este item é muito simular ao anterior. Os exemplos de código abaixo falam por sí só:</p>
<blockquote>
<p>Ruim</p>
</blockquote>
<pre><code>var block = $(&apos;.block&apos;);
var elements = $(&apos;.block&apos;).find(&apos;.element&apos;);
var title = $(&apos;.block&apos;).data(&apos;title&apos;);
</code></pre><blockquote>
<p>Bom</p>
</blockquote>
<pre><code>var block = $(&apos;.block&apos;);
var elements = block.find(&apos;.element&apos;);
var title = block.data(&apos;title&apos;);
</code></pre><h2 id="6-Evite-a-manipulacao-pesada-do-DOM"><a href="#6-Evite-a-manipulacao-pesada-do-DOM" class="headerlink" title="6. Evite a manipulação pesada do DOM"></a>6. Evite a manipulação pesada do DOM</h2><p>Você pode se surpreender com a quantidade de elementos que é possível manipular utilizando JavaScript. No entanto, se estes elementos estiverem ligados ao DOM essa surpreza será ruim. Manipular elementos no DOM é uma operação muito lenta e quanto mais elementos você precise manipular, pior será a performance.</p>
<p>A melhor forma de fazer isso utilizando jQuery é primiro “desacoplar” esses elementos no DOM, manipular e depois retorná-los ao DOM. Exemplo:</p>
<pre><code>var elem = $(&apos;.element&apos;);
var parent = elem.parent();
elem.detach();
... operações muito pesadas, ordenação de tabelas por exemplo ...
parent.append(elem);
</code></pre><h2 id="7-Evite-“appends”-desnecessarios"><a href="#7-Evite-“appends”-desnecessarios" class="headerlink" title="7. Evite “appends” desnecessários"></a>7. Evite “appends” desnecessários</h2><p>Ao invés de ficar utilizando o método <code>append(...)</code> pra cada elemento que estiver adicionando, procure sempre montar uma string HTML e utiliar o <code>append(...)</code> de uma só vez.</p>
<h2 id="8-Prefira-utilizar-data-no-lugar-de-attr"><a href="#8-Prefira-utilizar-data-no-lugar-de-attr" class="headerlink" title="8. Prefira utilizar data() no lugar de attr()"></a>8. Prefira utilizar data() no lugar de attr()</h2><p>O método <code>attr(...)</code> escreve os atributos direto no DOM, e como falamos no item (6), qualquer manipulação direta do DOM deve ser evitada sempre que possível por questões de performance.</p>
<blockquote>
<p>NOTA: a utilização de <code>data(...)</code> embora preferível pelas questões citadas, deve ser verificada com cautela. Se voce estiver utilizando uma biblioteca de terceiros que esteja manipulando os atributos direto no DOM você poderá ter problemas.</p>
</blockquote>
<h2 id="9-Verifique-se-o-elemento-realmente-existe-antes-de-usa-lo"><a href="#9-Verifique-se-o-elemento-realmente-existe-antes-de-usa-lo" class="headerlink" title="9. Verifique se o elemento realmente existe antes de usá-lo"></a>9. Verifique se o elemento realmente existe antes de usá-lo</h2><blockquote>
<p>Ruim</p>
</blockquote>
<pre><code>$(&apos;.element&apos;).slideDown();
// esse ponto executa uma chamada pesada que efetua vários
// cálculos mesmo se o elemento não existir
</code></pre><blockquote>
<p>Bom</p>
</blockquote>
<pre><code>var element = $(&apos;.element&apos;);
if (element.length) {
    element.slideDown();
}
</code></pre><p>Verificar se o elemento existe antes de efetuar algumas operações evita que alguns algoritmos sejam executados desnecessáriamente.</p>
<h2 id="10-Evite-a-utilizacao-de-loops"><a href="#10-Evite-a-utilizacao-de-loops" class="headerlink" title="10. Evite a utilização de loops"></a>10. Evite a utilização de loops</h2><blockquote>
<p>Ruim</p>
</blockquote>
<pre><code>$(&apos;.element&apos;).each(function() {
    $(this).something().somethingElse();
});
</code></pre><blockquote>
<p>Bom</p>
</blockquote>
<pre><code>$(&apos;.element&apos;).something().somethingElse();
</code></pre><p>A API do jQuery nos permite executar muitas operações em grupo baseado no resultado da query. Utilize as operações em grupo sempre que possível.</p>
<h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>jQuery é sem dúvida uma das bibliotecas javascript mais utilizadas e dificilmente perderá esse ranking. Por isso, vale a pena entender melhor como esta biblioteca funciona para utiliza-la da maneira mais correta possível.</p>
<p>Até a próxima!</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Arrays tipados - ES6]]></title>
      <url>http://diullei.com/2016/10/28/Arrays-tipados-ES6/</url>
      <content type="html"><![CDATA[<p>Os arrays tipados são parte da especificação do ECMAScript 2015 (também conhecido como ES6). Eles foram projetados para facilitar o trabalho com estruturas de dados binárias. Inicialmente os arrays tipados foram introduzidos pelas APIs WebGL com o objetivo de diminuir a dissonância entre as estruturas de dados padrões do <code>JavaScript</code> e as estruturas de dados do <code>C</code>, linguagem base da API <code>WebGL</code>, e com isso permitir ao JavaScript acessar diretamente a estrutura já alocada em memória.</p>
<p>Você pode acessar este <a href="http://caniuse.com/#feat=typedarrays" target="_blank" rel="noopener">link</a> para saber quais browsers já suportam esse recurso: <a href="http://caniuse.com/#feat=typedarrays" target="_blank" rel="noopener">http://caniuse.com/#feat=typedarrays</a></p>
<h2 id="Criando-Arrays-tipados"><a href="#Criando-Arrays-tipados" class="headerlink" title="Criando Arrays tipados"></a>Criando Arrays tipados</h2><p>Aqui não existe nenhum segredo, criamos um array tipado da mesma forma que criarpiamos qualquer instância de objeto. em JavaScript:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Uint16Array</span>(<span class="number">10</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">0xFFFF</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<p>O argumento passado no construtor define o número de elementos que estamos alocando neste array (No exemplo acima estamos alocando 10 elementos do tipo numérico <code>uint16</code>, o que de acordo com a especificação deste tipo de array irá alocar 20 bytes de memória).</p>
<p>Veja abaixo uma lista com os tipos de arrays tipados disponíveis:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Tipo</th>
<th style="text-align:center">Tamanho (byte)</th>
<th style="text-align:left">Tipo correspondente em C</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>Int8Array</code></td>
<td style="text-align:center">1</td>
<td style="text-align:left">int8_t</td>
</tr>
<tr>
<td style="text-align:left"><code>Uint8Array</code></td>
<td style="text-align:center">1</td>
<td style="text-align:left">uint8_t</td>
</tr>
<tr>
<td style="text-align:left"><code>Uint8ClampedArray</code></td>
<td style="text-align:center">1</td>
<td style="text-align:left">uint8_t</td>
</tr>
<tr>
<td style="text-align:left"><code>Int16Array</code></td>
<td style="text-align:center">2</td>
<td style="text-align:left">int16_t</td>
</tr>
<tr>
<td style="text-align:left"><code>Uint16Array</code></td>
<td style="text-align:center">2</td>
<td style="text-align:left">uint16_t</td>
</tr>
<tr>
<td style="text-align:left"><code>Int32Array</code></td>
<td style="text-align:center">4</td>
<td style="text-align:left">int32_t</td>
</tr>
<tr>
<td style="text-align:left"><code>Uint32Array</code></td>
<td style="text-align:center">4</td>
<td style="text-align:left">uint32_t</td>
</tr>
<tr>
<td style="text-align:left"><code>Float32Array</code></td>
<td style="text-align:center">4</td>
<td style="text-align:left">float</td>
</tr>
<tr>
<td style="text-align:left"><code>Float64Array</code></td>
<td style="text-align:center">8</td>
<td style="text-align:left">double</td>
</tr>
</tbody>
</table>
<h2 id="ArrayBuffer-e-DataView"><a href="#ArrayBuffer-e-DataView" class="headerlink" title="ArrayBuffer e DataView"></a>ArrayBuffer e DataView</h2><p><code>ArrayBuffer</code> e <code>DataView</code> são parte da implementação de arrays tipados. Um <code>ArrayBuffer</code> básicamente armazena os dados de um array tipado. Por exemplo:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fileArrayBuffer = reader.readAsArrayBuffer(file);</span><br></pre></td></tr></table></figure>
<p>Neste código <code>ArrayBuffer</code> ira armazenar todos os bytes do arquivo. Como esse arquivo pode estar em encodes diferentes, precisaremos fazer alguma manipulação para ler seu conteúdo. Por exemplo, se este arquivo for do tipo <code>UTF-8</code> poderemos associar este <code>ArrayBuffer</code> ao tipo <code>Uint16Array</code> para ler corretamente seu conteúdo.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Uint16Array</span>(fileArrayBuffer);</span><br><span class="line"><span class="built_in">String</span>.fromCharCode(arr[<span class="number">0</span>]); <span class="comment">// A</span></span><br></pre></td></tr></table></figure>
<p>Já o <code>DataView</code> é um tipo que nos permite acessar estruturas binrias em memória. Exemplo, se tivermos uma estrutura em <code>C</code> declarada da seguinte forma:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">char</span>[<span class="number">10</span>] username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Iremos ler esta estrutura em JavaScript com o código:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">11</span>);</span><br><span class="line"><span class="keyword">var</span> id = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buf, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> username = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buf, <span class="number">1</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>Note que se trata de uma leitura sequencial da memória onde o primeiro byte contém o valor de <code>id</code> e os outros 10 bytes seguintes o valor de <code>username</code>. Aqui estamos utilizando <code>Uint8Array</code> como <code>DataView</code>.</p>
<h2 id="Onde-esse-recurso-ja-esta-sendo-utilizado"><a href="#Onde-esse-recurso-ja-esta-sendo-utilizado" class="headerlink" title="Onde esse recurso ja está sendo utilizado?"></a>Onde esse recurso ja está sendo utilizado?</h2><ul>
<li><strong>WebGL</strong> - Utiliza typed arrays em buffer, pixels e mapas de testuras</li>
<li><strong>Canvas</strong> - Canvas utiliza um arrau tipado para armazenar uma imagem.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uint8ClampedArray = ctx.getImageData(...).data;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>WebSockets</strong> - Uma vez habilitado permite a transferência de dados utilizando um <code>ArrayBuffer</code>.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webSocket.binaryType = <span class="string">'arraybuffer'</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Outras APIs</strong> - <em>File API</em>, <em>XMLHttpRequest,</em> <em>Fetch API</em>, <code>window.postMessage()</code> entre outros.</li>
</ul>
<h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>Iremos utilizar os Arrays typados em trechos de código muito específicos onde a performance com a manipulação de estruturas de dados mais complexas for importante, como por exemplo a manipulação de imagens e de som.</p>
<p>É isso, até a próxima.</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> ES6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Definindo o tipo de "this" em funções]]></title>
      <url>http://diullei.com/2016/10/27/Type-of-this-for-functions/</url>
      <content type="html"><![CDATA[<p>O TypeScript 2.0 nos permite definir o tipo da referência <code>this</code> dentro de uma função. Como sempre, para entender melhor, vamos aos exemplos:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line">    <span class="keyword">public</span> doSomething() &#123;</span><br><span class="line">        <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Na função <code>doSomething()</code> a variavel <code>self</code> assume o tipo <code>Test</code>. Até aqui nada novo. Agora vamos a outro exemplo:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Na função <code>doSomething()</code> acima a variável <code>self</code> assume o tipo <code>any</code>. Isso por que se trata de uma função isolada, fora de uma classe. O que acontece é que agora com a nova versão do TypeScript podemos definir o tipo de <code>this</code> para funções isoladas. Vamos tomar como base a função <code>doSomething()</code>. Digamos que queiramos impedir que um desenvolvedor, por engano, tente chamar qualquer método ou atributo de <code>this</code> dentro desta função. Para isso vamos reescrever essa função da seguinte forma:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"><span class="keyword">this</span>: <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Agora o tipo de <code>self</code> é <code>void</code>. Como <code>void</code> não poss membros, caso alguem tente chamar qualquer um de seus membros por engano um erro será exibido em tempo de compilação. Utilizamos uma nova notação onde criamos um argumento chamado <code>this</code> e definimos seu tipo. Esse argumento precisa ser sempre o primeiro argumento dentro da função e ele não será repassado para o código final servindo apenas para informar ao compilador o tipo que queremos definir para <code>this</code>.</p>
<p>Agora vamos a um exemplo mais prático. Veja a seguinte interface:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> UIElement &#123;</span><br><span class="line">    addClickListener(onclick: <span class="function">(<span class="params"><span class="keyword">this</span>: <span class="built_in">void</span>, e: Event</span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Note que a função <code>addClickListener(...)</code> espera uma outra função como parâmetro que não utilize <code>this</code> no seu bloco de código. Se temtarmos passar uma função que viole essa definição teremos um erro:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> UIElement &#123;</span><br><span class="line">    addClickListener(onclick: <span class="function">(<span class="params"><span class="keyword">this</span>: <span class="built_in">void</span>, e: Event</span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uiElement: UIElement = &lt;<span class="built_in">any</span>&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Handler &#123;</span><br><span class="line">    info: <span class="built_in">string</span>;</span><br><span class="line">    onClickBad(<span class="keyword">this</span>: Handler, e: Event) &#123;</span><br><span class="line">        <span class="keyword">this</span>.info = <span class="string">"message"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> Handler();</span><br><span class="line">uiElement.addClickListener(h.onClickBad); <span class="comment">// erro!</span></span><br></pre></td></tr></table></figure>
<p>Veja que dentro da função <code>onClickBad()</code> estamos usando <code>this</code> normalmente. Mas se tentarmos passar a função <code>onClickBad</code> como argumento em <code>addClickListener(...)</code>…</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uiElement.addClickListener(h.onClickBad); <span class="comment">// erro!</span></span><br></pre></td></tr></table></figure>
<p>…teremos um erro de compilação.</p>
<blockquote>
<p>NOTA: Para utilizar este recurso precisamos habilitar a chave <code>--noImplicitThis</code> bo arquivo <code>tsconfig.json</code> ou passando diretamente via linha de comando.</p>
</blockquote>
<p>É isso. Até a próxima.</p>
<blockquote>
<p>Reference: TS v2.0 <a href="https://github.com/Microsoft/TypeScript/issues/3694" target="_blank" rel="noopener">issues/3694</a> e <a href="https://github.com/Microsoft/TypeScript/pull/4910" target="_blank" rel="noopener">pull/4910</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
            <category> TypeScript v2.0 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TypeScript e o tipo "never"]]></title>
      <url>http://diullei.com/2016/10/26/TypeScript-and-the-Never-type/</url>
      <content type="html"><![CDATA[<p>Continuando a série de artigos sobre as novidades da versão 2.0 do TypeScript hoje eu vou falar um pouco sobre o tipo <code>never</code>.</p>
<p>Como vimos no post sobre <a href="/posts/Tagged-union-types">união discriminada de tipos</a> e em outro post sobre <a href="/posts/TypeScript-Type-Guards">type guards</a>, o compilador do TypeScript possui um recurso que analiza todas as possíveis rotas de fluxo no código que está sendo compilado com o objetivo de definir da forma mais precisa possível o tipo das variáveis que estão sendo utilizadas (Veja o ultimo post <a href="/posts/Tagged-union-types">“união discriminada de tipos”</a> para entender um pouco mais).</p>
<p>Em um aplicativo, em alguns casos, teremos fluxos no código que nuca serão executados. Por causa disso, para prover uma analize de código mais completa o time do TypeScript inseriu um novo tipo chamado <code>never</code>. Entenda o tipo <code>never</code> com a representação de valores que nunca serão retornados.</p>
<p>Encontraremos o tipo <code>never</code> no código de 2 maneiras diferentes. Ele pode ocorrer naturalmente. Por exemplo:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="function">(<span class="params">(<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">while</span> (<span class="params"><span class="literal">true</span></span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="comment">//...</span></span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>)<span class="params">()</span>;</span></span><br><span class="line"><span class="function">// <span class="params">let</span> <span class="params">result</span>: <span class="params">never</span></span></span><br></pre></td></tr></table></figure>
<p>Se observarmos o código da função anônima acima veremos um “loop infinito”, o código fica eternamente executando dentro do bloco <code>while</code> e nunca retorna um valor, ou seja, nunca finaliza. Como o compilador do TypeScript analiza todo código que está sendo escrito, ele entende naturalmente que se trata de um bloco de código que nunca será executado e por isso, no nosso caso, ele define o valor de retorno da função como <code>never</code>.</p>
<p>Além de fluxos com “loop infinito” o compilador também irá inferir o tipo <code>never</code> para funções que lançam exceção em seu fluxo principal. Exemplo:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Inferred return type is never</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> error(<span class="string">"Something failed"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = fail();</span><br><span class="line"><span class="comment">// let result: never</span></span><br></pre></td></tr></table></figure>
<p>A outra forma de encontrar o tipo <code>never</code> é quando declaramos diretamente este tipo. Exemplo:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alwaysNever</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Confundindo-o-tipo-“never”-com-o-tipo-“void”"><a href="#Confundindo-o-tipo-“never”-com-o-tipo-“void”" class="headerlink" title="Confundindo o tipo “never” com o tipo “void”"></a>Confundindo o tipo “never” com o tipo “void”</h3><p>É muito comum a primeira vista alguem confundir o tipo <code>never</code> com o tipo <code>void</code>, mas se olharmos com mais atenção veremos que são tipos completamente diferentes. Para explicar melhor essa diferença vamos a um caso de uso:</p>
<p>Antes de termos o tipo <code>never</code> o código acima (função <code>function alwaysNever() { ... }</code>) seria reconhecido como sendo do tipo <code>void</code>. Algo similar ao código abaixo:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alwaysThrows</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Como <code>void</code> não é um subtipo, a auusencia do tipo <code>never</code> ocasionava em alguns momentos alguns efeitos colaterais, veja o exemplo abaixo:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alwaysThrows</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a ? <span class="number">123</span> : alwaysThrows();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = test(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>Se verificarmos no código acima, com a ausencia do tipo <code>never</code> a variável <code>result</code> assume o tipo <code>number | void</code>. Isso é um erro por que se verificarmos o retorno da função <code>test(...)</code> tendo o argument <code>a</code> como <code>false</code> teremos na realidade uma exceção e nunca um valor do tipo <code>void</code>. Com isso em mente o tipo da variável <code>result</code> deve ser entendido como <code>number</code> já que temos como unica possibilidadde de retorno é o valor <code>123</code>. O tipo <code>never</code> nos ajuda a arrumar este efeito colateral pois <code>never</code> é um subtipo de todos os outros tipos conhecidos.</p>
<p>Reescrevendo o código acima temos:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alwaysThrows</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a ? <span class="number">123</span> : alwaysThrows();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = test(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>Agora o compilador irá entender corretamente o código e definir o tipo da variavel <code>result</code> como <code>number</code>.</p>
<p>É isso, até a próxima!</p>
<blockquote>
<p>Reference: TS v2.0 <a href="https://github.com/Microsoft/TypeScript/pull/8652" target="_blank" rel="noopener">pull/8652</a> e <a href="https://github.com/Microsoft/TypeScript/issues/3076" target="_blank" rel="noopener">issues/3076</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
            <category> TypeScript v2.0 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[União discriminada de tipos (Tagged union types)]]></title>
      <url>http://diullei.com/2016/10/25/Tagged-union-types/</url>
      <content type="html"><![CDATA[<p>Hoje vou falar sobre uma feature muito legal que desenbarcou junto com a versão 2.0 to TypeScript, a união discriminada de tipos. Trata-se de uma extensão do recurso <a href="/posts/TypeScript-Type-Guards">type guards</a> que baseia a verificação do tipo dentro de um determinado fluxo do código, tomando como base valor de uma propriedade. A definição pode parecer um pouco confusa, por isso vamos a um exemplo:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Square &#123;</span><br><span class="line">    kind: <span class="string">"square"</span>;</span><br><span class="line">    size: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Rectangle &#123;</span><br><span class="line">    kind: <span class="string">"rectangle"</span>;</span><br><span class="line">    width: <span class="built_in">number</span>;</span><br><span class="line">    height: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Circle &#123;</span><br><span class="line">    kind: <span class="string">"circle"</span>;</span><br><span class="line">    radius: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Shape = Square | Rectangle | Circle;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params">s: Shape</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Repare que no bloco switch abaixo, o tipo da variável "s" é reconhecido pelo</span></span><br><span class="line">    <span class="comment">// compilador de forma diferente em cada bloco condicional. O compilador define</span></span><br><span class="line">    <span class="comment">// o tipo correto baseado no valor da propriedade "kind" definida nas interfaces</span></span><br><span class="line">    <span class="comment">// acima como um valor constante. Por esse motivo podemos utilizar as propriedades</span></span><br><span class="line">    <span class="comment">// específicas de cada interface sem precisar fazer uma conversão (cast).</span></span><br><span class="line">    <span class="keyword">switch</span> (s.kind) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"square"</span>: <span class="keyword">return</span> s.size * s.size;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"rectangle"</span>: <span class="keyword">return</span> s.width * s.height;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"circle"</span>: <span class="keyword">return</span> <span class="built_in">Math</span>.PI * s.radius * s.radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Repare como nas funções abaixo o compilador entende a lógica aplicada nos if's e</span></span><br><span class="line"><span class="comment">// interpreta o tipo de "s" de acordo com a propriedade "kind".</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params">s: Shape</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.kind === <span class="string">"square"</span>) &#123;</span><br><span class="line">        s;  <span class="comment">// Aqui "s" é do tipo: "Square"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        s;  <span class="comment">// Aqui "s" é do tipo: "Rectangle | Circle"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params">s: Shape</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.kind === <span class="string">"square"</span> || s.kind === <span class="string">"rectangle"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s;  <span class="comment">// Aqui "s" é do tipo "Circle"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Por enquanto esse recurso opera apenas sobre propriedades tipo <code>string</code>. Existe a intenção de, no futuro, adicionar suporte a outros tipo como <code>boolean</code> e <code>number</code>.</p>
<p>Esper oque este post tenha sido útil.</p>
<p>Até a próxima!</p>
<blockquote>
<p>Reference: TS v2.0 <a href="https://github.com/Microsoft/TypeScript/pull/9163" target="_blank" rel="noopener">pull/9163</a>, <a href="https://github.com/Microsoft/TypeScript/issues/186" target="_blank" rel="noopener">issues/186</a> e <a href="https://github.com/Microsoft/TypeScript/issues/1003" target="_blank" rel="noopener">issues/1003</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
            <category> TypeScript v2.0 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TypeScript 2.0]]></title>
      <url>http://diullei.com/2016/10/24/TypeScript-2/</url>
      <content type="html"><![CDATA[<p>Finalmente consegui voltar a ativa depois de algum tempo sem escrever. Hoje vou falar sobre a ultima versão do TypeScript, a versão 2.0. Essa versão é o resultado de muito trabalho e esforço do time do TypeScript e da comunidade.</p>
<p>Para começar a utilizar esta nova versão você pode baixar via npm utilizando o seguinte comando:</p>
<blockquote>
<p>npm install -g typescript@2.0</p>
</blockquote>
<p>Pronto! Agora você já está pronto para começar a explorar as novas features!</p>
<h2 id="Um-pouco-de-historia-Acontecimentos-principais"><a href="#Um-pouco-de-historia-Acontecimentos-principais" class="headerlink" title="Um pouco de história (Acontecimentos principais)"></a>Um pouco de história (Acontecimentos principais)</h2><ul>
<li><p><em>TypeScript 0.8</em> - Em Outubro de 2012 os desenvolvedores foram surpreendidos com o que muitos chamavam de “O CofeeScript da Microsoft”. O TypeScript veio ao mundo e muitos começaram a entender as inúmeras possibilidades de se ter uma linguagem mundialmente popular como o <code>JavaScript</code> mesclada a um forte sistema de tipos (que na época nem era tão forte assim rs).</p>
</li>
<li><p><em>DefinitelyTyped</em> - Alguns meses depois do lançamento do TypeScript a comunidade começou a se movimentar. Nesta época eu iniciei a construção do <a href="https://github.com/DefinitelyTyped/tsd" target="_blank" rel="noopener">TSD</a> com a intenção de aprender mais sobre TypeScript e ao mesmo tempo criar alguma ferramenta que fosse útil não apenas pra mim, mas para outros desenvolvedores. Conversando em fóruns com outros desenvolvedores entusiastas (que eram poucos na época) eu puder conhecer alguns pessoas que hoje são figuras bastante conhecidas entre os desenvolvedores TypeScript e pudemos juntos montar o time <a href="https://github.com/DefinitelyTyped" target="_blank" rel="noopener">DefinitelyTyped</a>.</p>
</li>
<li><p><em>TypeScript 1.0</em> - Há alguns anos atrás a versão 1.0 do TypeScript foi disponibilizada e com ela os desenvolvedores puderam entender o potencial do trabalho com JavaScript combinado com um forte sistema de tipagem estática. Alertas de erro em tempo de compilação, editores com recursos de navegação e refatoração, entre outras ferramentas trouxeram para os desenvolvedores um enorme ganho de produtividade.</p>
</li>
<li><p><em>TypeScript 1.1</em> - A versão 1.1 trouxe um compilador totalmente reescrito que passou a executar 4x mais rápido que o anterior. Com este novo compilador ganhamos, além da velocidade de compilação, uma grande flexibilidade ma interação com o código para adição de novas features. Uma outra grande mudança foi a migração do código do TypeScript do <a href="https://typescript.codeplex.com/" target="_blank" rel="noopener">Codeplex</a> para o <a href="https://github.com/Microsoft/TypeScript" target="_blank" rel="noopener">Github</a>. Essa sem dúvidade potêncializou muito a comunicação com a comunidade permitindo uma maior participação e contrinbuição, seja ajudando a especificar novas fetures, submetendo bugs ou programando diretamente no código do compilador.</p>
</li>
<li><p><em>TypeScript 1.4 e 1.5</em> - Essa versão trouxe um grande suporte a features do <code>ES2015/ES6</code>. Juntamente com isso passamos a ter suporte a modules e decorators, o que permitiu ao time do <code>Angular2</code> adotar o TypeSCript como linguagem oficial. Uma parceria muito produtiva que trouxe ainda muito mais recursos e feedbacks.</p>
</li>
<li><p><em>TypeScript 1.6 e 1.8</em> - Com essa versão tivemos muitas melhorias no sistema de tipos do TypeScript. Tivemos a cada release a adição de padrões JavaScript, o que proporcionou um maior suporte a bibliotecas JavaScript existentes. Muitas melhorias no compilador também foram feitas neste período.</p>
</li>
<li><p><em>TypeScript 2.0</em> - Finalmente! Agora temos um grande suporte a bibliotecas JavaScript, excelentes ferramentas, um poderoso Language Service e muito mais… vamos falar um pouco sobre as principais novidades.</p>
</li>
</ul>
<h2 id="Novidades-no-TypeScript-2-0"><a href="#Novidades-no-TypeScript-2-0" class="headerlink" title="Novidades no TypeScript 2.0"></a>Novidades no TypeScript 2.0</h2><p>Eu já tenho falado a um tempo sobre algumas features planejadas para esta versão. Algumas já haviam sido liberadas para teste em versões beta. Vou tentar mais uma vez destacar as principais features que trouzxeram grandes mudanças para a linguagem:</p>
<h3 id="Aquisicao-de-definicoes-de-tipo-os-famosos-arquivos-d-ts"><a href="#Aquisicao-de-definicoes-de-tipo-os-famosos-arquivos-d-ts" class="headerlink" title="Aquisição de definiçoes de tipo (os famosos arquivos .d.ts)"></a>Aquisição de definiçoes de tipo (os famosos arquivos .d.ts)</h3><p>Grandes ferramentas desenvolvidas pela comunidade (e eu tive a oportunidade de desenvolver uma delas) como o <a href="https://github.com/typings/typings" target="_blank" rel="noopener">Typings</a> e o <a href="https://github.com/DefinitelyTyped/tsd" target="_blank" rel="noopener">TSD</a> contribuiram bastante para o ecosistema do TypeScript ajudando milhares de desenvlvedores ao redor do munto a obter arquivos de definição para as mais diversas bibliotecas JavaScript, no entanto, existe um gerenciador de download de pacotes que já se popularizou muito entre os desenvolvedores JavaScript e nada melhor do que utilizar este mesmo gerenciador no ciclo de trabalho com TypeScript, o <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a>. Um esforço do time do TypeScript junto com o time do DefinitelyTyped e outros membros da comunidade trouxe ao TypeScript a capacidade de obter tipagens diretamente do npm. Isso ajuda a simplificar e muito o workflow de senvolvimento, já que, já temos uma infinidade de ferramentas diferentes que precisam ser utilizadas. Nada melhor do que tentar simplificar as coisas. O TSD e o Typings ajudaram bastante no passado, mas agora com o npm, a tendência é que o trabalho se torne mais simples e padronizado. Por exemplo, se você quiser baixar o arquivo de definição do <code>lodash</code> basta utilizar a seguinte linha de comando:</p>
<blockquote>
<p>npm install –save @types/lodash</p>
</blockquote>
<p>Neste <a href="/posts/The-Future-of-Declaration-Files">post</a> você encontra mais detalhes sobre a aquisição de arquivos de definição direto do npm.</p>
<h3 id="Tipos-nao-nulos"><a href="#Tipos-nao-nulos" class="headerlink" title="Tipos não nulos"></a>Tipos não nulos</h3><p>Uma das maiores causas de bug em software são falhas relacionadas a tipos nulos. É muito comum um desenvolvedor não verificar se as variáveis e/ou parâmetros estão ou não nulos antes de começar a utilizá-los. Para facilitar nossa vida temos agora a adição deste novo recurso. Em JavaScript além do valor <code>null</code> temos o <code>undefined</code> e estes dois valores se tornam a fonte do mal quando não são bem compreendidos e tratados.</p>
<p>Originalmente no TypeScript todos os tipos eram <code>nullables</code>, ou seja, qualquer tupo poderia arssumir um valor nulo. Agora com o novo compilador os valores null e undefined foram separados como tipos diferentes, ou seja, ao utilizar este novo recurso precisamos de forma declarativa definir se uma variável ou argumento terá o valor <code>null</code> ou <code>undefined</code>. Fazemos isso utilizando o recurso <code>union types</code>. Você pode verificar este <a href="/posts/TypeScript2-Beta-nun-nullable-types">post</a> para entender mais.</p>
<h3 id="Controle-de-fluxo-por-analize-de-tipos"><a href="#Controle-de-fluxo-por-analize-de-tipos" class="headerlink" title="Controle de fluxo por analize de tipos"></a>Controle de fluxo por analize de tipos</h3><p>Este não é um revcurso novo, foi inserido no TypeScript desde a versão 1.8, no entanto com a versão 2.0 este recurso foi expandido e ganhou muito mais poder, principalmente quando este é combinado com tipos <code>non-nullables</code>. Exemplo:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">condition: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">        result = computeImportantStuff();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ops! 'result' pod nunca ter sido inicializado!</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Você pode acessar este <a href="/posts/TypeScript-Type-Guards">post</a> para saber mais.</p>
<h3 id="Modificador-readonly"><a href="#Modificador-readonly" class="headerlink" title="Modificador readonly"></a>Modificador readonly</h3><p>Agora podemos definir membros imutaveis em TypeScript de forma muito fácil. Basta declarar as propriedades como <code>readonly</code>. Exemplo:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    readonly name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (name.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Empty name!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Erro! 'name' é somente leitura.</span></span><br><span class="line"><span class="keyword">new</span> Person(<span class="string">"Daniel"</span>).name = <span class="string">"Dan"</span>;</span><br></pre></td></tr></table></figure>
<p>Lindo neh?</p>
<p>Existem ainda muitos outros recursos que podem ser conferidos <a href="https://github.com/Microsoft/TypeScript/wiki/What%27s-new-in-TypeScript" target="_blank" rel="noopener">aqui</a>.</p>
<h2 id="O-que-esperar-do-futuro"><a href="#O-que-esperar-do-futuro" class="headerlink" title="O que esperar do futuro?"></a>O que esperar do futuro?</h2><p>Muita coisa ainda está por vir. O JavaScript é uma das linguagens mais utilizadas no mundo, difícil um programador web hoje em dia não ter escrito ao menos algumas linhas de código em JavaScript. O TypeScript veio para ficar. Novas features virão, novas ferramentas e editores, e quem irá usufruir de tudo isso somos nós desenvolvedores.</p>
<p>Até a próxima!</p>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
            <category> TypeScript v2.0 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6 - strings - Novos métodos]]></title>
      <url>http://diullei.com/2016/07/25/ES6-strings-new-methods/</url>
      <content type="html"><![CDATA[<p>O ES6 trouxe várias features legais para manipulação de strings. Hoje quero falar sobre 4 funções: <code>startsWith</code>, <code>endsWith</code>, <code>includes</code> e <code>repeat</code>.</p>
<p>Se você já precisou verificar o inicio ou final de um texto para validar se o mesmo inicia com algum padrão pré estabelecido você certamente já precisou escrever algum código utilizando a função <code>indexOf</code>. Exemplo:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="string">'iPhone 5'</span>, <span class="string">'Moto X2'</span>, <span class="string">'iPad 2'</span>, <span class="string">'iPhone 6'</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iphones = list.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// verifica se o texto inicia com "iPhone"</span></span><br><span class="line">    <span class="comment">// esse trecho de código não é nada legível</span></span><br><span class="line">    <span class="keyword">return</span> x.indexOf(<span class="string">'iPhone'</span>) === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">iphones.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// =&gt; iPhone 5</span></span><br><span class="line"><span class="comment">// =&gt; iPhone 6</span></span><br></pre></td></tr></table></figure>
<p>Note que foi necessário utilizar a função <code>indexOf</code>. Essa função retorna o número correspondente ao caracter no texto (iniciando com zero) que inicia com o padrão passado como parâmetro. No nosso caso “iPhone”. Caso o padrão não seja encontrado a função retorna o valor -1.</p>
<p>O que algumas pessoas fazem é adicionar “na força” um método novo ao objeto <code>string</code> para que o código fique mais legíveil:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">String</span>.prototype.startsWith) &#123;</span><br><span class="line">    <span class="built_in">String</span>.prototype.startsWith = <span class="function"><span class="keyword">function</span>(<span class="params">searchString, position</span>) </span>&#123;</span><br><span class="line">        position = position || <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.indexOf(searchString, position) === position;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Com isso podemos reescrever o código do nosso primeiro exemplo da seguinte forma:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="string">'iPhone 5'</span>, <span class="string">'Moto X2'</span>, <span class="string">'iPad 2'</span>, <span class="string">'iPhone 6'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iphones = list.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.startsWith(<span class="string">'iPhone'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">iphones.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// =&gt; iPhone 5</span></span><br><span class="line"><span class="comment">// =&gt; iPhone 6</span></span><br></pre></td></tr></table></figure>
<p>Repare que com a utilizção do método “startsWith” o código ficou mais intuitivo do que o anterior.</p>
<h2 id="ES6-Novas-funcoes"><a href="#ES6-Novas-funcoes" class="headerlink" title="ES6 - Novas funções"></a>ES6 - Novas funções</h2><p>Com a chegada do ES6 não precisamos mais fazer essas manobras. Segue abaixo a descrição de algumas funções que foram adicionadas ao javascript:</p>
<h3 id="startsWith-…"><a href="#startsWith-…" class="headerlink" title="startsWith(…)"></a>startsWith(…)</h3><p>Isso mesmo, a função que acabamos de ver nos exemplos anteriores!</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'hello'</span>.startsWith(<span class="string">'hell'</span>);</span><br><span class="line"><span class="comment">//=&gt; true</span></span><br></pre></td></tr></table></figure>
<h3 id="endsWith-…"><a href="#endsWith-…" class="headerlink" title="endsWith(…)"></a>endsWith(…)</h3><p>Similar a função <code>startsWith</code> só que esta verifica se o texto termina com o padrão informado:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'hello'</span>.endsWith(<span class="string">'ello'</span>);</span><br><span class="line"><span class="comment">//=&gt; true</span></span><br></pre></td></tr></table></figure>
<h3 id="includes-…"><a href="#includes-…" class="headerlink" title="includes(…)"></a>includes(…)</h3><p>Utilizamos esta função para identificar se um texto contem um outro texto:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'hello'</span>.includes(<span class="string">'ell'</span>);</span><br><span class="line"><span class="comment">//=&gt; true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>No caso acima o texto “hello” contem uma ocorrencia do outro texto “ell”</p>
</blockquote>
<h3 id="repeat-…"><a href="#repeat-…" class="headerlink" title="repeat(…)"></a>repeat(…)</h3><p>Utilizamos o <code>repeat</code> para repetir um texto <code>n</code> vezes:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'blah '</span>.repeat(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//=&gt; "blah blah blah "</span></span><br></pre></td></tr></table></figure>
<p>Existem ainda outras funções no objeto <code>string</code>. Irei apresenta-las num próximo post. Até a próxima!</p>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
            <category> ES6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6 - Nova sintaxe para criação de objetos]]></title>
      <url>http://diullei.com/2016/07/18/Object-literal-features/</url>
      <content type="html"><![CDATA[<p>Com o ES6 temos a possibilidade de criar objetos com uma sintaxe bem diferente da que estávamos acostumados até agora. Vamos tomar como exemplo a seguinte declarção:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> firstName = <span class="string">'Diulle'</span>;</span><br><span class="line"><span class="keyword">const</span> secondName = <span class="string">'Gomes'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    firstName: firstName,</span><br><span class="line">    secondName: secondName</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Utilizando a nova sintaxe podemos reescrever esse trecho de código da seguinte forma:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> firstName = <span class="string">'Diulle'</span>;</span><br><span class="line"><span class="keyword">const</span> secondName = <span class="string">'Gomes'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    firstName,</span><br><span class="line">    secondName</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Note que neste caso o nome da variável será considerado também como nome da propriedade do objeto. Existe ainda uma outra forma conhecida como “Computed property key” onde podemos passar o resultado de uma expressão na criação de uma propriedade. Veja o seguinte exemplo:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> firstName = <span class="string">'firstName'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [firstName]: <span class="string">'Diullei'</span>,</span><br><span class="line">    [<span class="string">'secondName'</span>]: <span class="string">'Gomes'</span>,</span><br><span class="line">    [<span class="string">'other'</span> + <span class="string">'name'</span>]: <span class="string">'Moura'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Essa mesma sintaxe também pode ser aplicada par a criação de funções. Por exemplo, o seguinte trecho de códiogo:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    myMethod: <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Pode ser reescrito da seguinte forma:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    myMethod(x, y) &#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Ou assim:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    [<span class="string">'myMethod'</span>](x, y) &#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>O objetivo principal dessa nova sintaxe é facilitar a utilização de <code>Symbols</code> como nome de propriedades. Exemplo:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    * [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">'hello'</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">'world'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// hello</span></span><br><span class="line"><span class="comment">// world</span></span><br></pre></td></tr></table></figure>
<p>No código acima estamos criando um objeto com um generator identificado por <code>Symbol.iterator</code>. Veremos mais a fundo a utilização de <code>Symbols</code> em outros artigos.</p>
<p>O legal é que o <code>TypeScript</code> já suporta a utilização dessa sintaxe!</p>
<p>Por hoje é só. Abraços!</p>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
            <category> TypeScript v1.4 </category>
            
            <category> ES6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TypeScript - Type Guards]]></title>
      <url>http://diullei.com/2016/07/16/TypeScript-Type-Guards/</url>
      <content type="html"><![CDATA[<p>Hoje vamos falar sobre <code>Type Guards</code>. Trata-se de um recurso do TypeScript que permite, a partir de uma validação de tipo, assumir que uma variável ou argumento declarado com o tipo <code>any</code> ou proveniente de uma uniao de tipos, é de um tipo específico préviamente verificado sem a necessidade de utilizar cast. Um pouco complicado neh? Nada melhor do que um exemplo para entendermos melhor:</p>
<p>Código utilizando cast:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arg: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arg === <span class="string">"string"</span>) &#123;</span><br><span class="line">      	<span class="keyword">return</span> (&lt;<span class="built_in">string</span>&gt;arg).charCodeAt(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> arg === <span class="string">"number"</span>) &#123;</span><br><span class="line">      	<span class="keyword">return</span> (&lt;<span class="built_in">number</span>&gt;arg).toFixed(<span class="number">10</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      	<span class="comment">// aqui arg continua sendo entendido como any</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Código utilizando type guards:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arg: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arg === <span class="string">"string"</span>) &#123;</span><br><span class="line">      	<span class="keyword">return</span> arg.charCodeAt(<span class="number">0</span>); <span class="comment">// arg já é entendido como string aqui</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> arg === <span class="string">"number"</span>) &#123;</span><br><span class="line">      	<span class="keyword">return</span> arg.toFixed(<span class="number">10</span>); <span class="comment">// arg já é entendido como number aqui</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      	<span class="comment">// aqui arg continua sendo entendido como any</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Note que o argumento <code>arg</code> foi declarado como <code>any</code> e dentro do bloco <code>if</code> que verifica se o tipo de <code>arg</code> é <code>string</code> o compilador entende que <code>arg</code> é <code>string</code> e lista no intellisense do editor todos os membros do tipo <code>string</code>. O mesmo acontece para o bloco de <code>if</code> que verifica se o tipo é <code>number</code>. Esse mesmo comportamento ocorre para tipos declarados com o operador de “union types”.</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arg: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> arg === <span class="string">"string"</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> arg.charCodeAt(<span class="number">0</span>); <span class="comment">// arg é entendido como string aqui</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> arg === <span class="string">"number"</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> arg.toFixed(<span class="number">10</span>); <span class="comment">// arg é entendido como number aqui</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Utilizamos o operador <code>typeof</code> para verificação de tipos primitivos. Caso queiramos utilizar o mesmo recurso para clases pré-definidas utilizamos o operador <code>instanceof</code>:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> A &#123;</span><br><span class="line">	name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arg: <span class="built_in">string</span> | A</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> arg === <span class="string">"string"</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> arg.charCodeAt(<span class="number">0</span>); <span class="comment">// arg é entendido como string aqui</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (arg <span class="keyword">instanceof</span> A) &#123;</span><br><span class="line">		<span class="keyword">return</span> arg.name; <span class="comment">// arg é entendido como A aqui</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>O legal desse recurso é que não precisamos ficar sujando o código fazendo cast. Uma solução muito mais elegante e limpa.</p>
<p>Até a próxima!</p>
<blockquote>
<p>Reference: TS v1.4 <a href="https://github.com/Microsoft/TypeScript/pull/824#issuecomment-58273237" target="_blank" rel="noopener">https://github.com/Microsoft/TypeScript/pull/824#issuecomment-58273237</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
            <category> TypeScript v1.4 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TypeScript - Um pouco mais sobre Union types]]></title>
      <url>http://diullei.com/2016/07/15/TypeScript-um-pouco-mais-sobre-union-types/</url>
      <content type="html"><![CDATA[<p>Esse post é uma continuação do post anterior onde eu falei sobre <a href="/2016/07/13/union-types/">union types</a>. Meu objetivo aqui é expor algumas propriedades básicas inerentes a declaração dos “union types”. Para ficar fácel de entender vou colocar um exemplo de código para cada propriedade. Vamos lá!</p>
<h2 id="Identidade"><a href="#Identidade" class="headerlink" title="Identidade"></a>Identidade</h2><blockquote>
<p><code>A | A</code> é equivalente a <code>A</code></p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> A &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: A | A = <span class="keyword">new</span> A();</span><br></pre></td></tr></table></figure>
<h2 id="Comutativa"><a href="#Comutativa" class="headerlink" title="Comutativa"></a>Comutativa</h2><blockquote>
<p><code>A | B</code> é equivalente a <code>B | A</code></p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> A &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">class</span> B &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: A | B;</span><br><span class="line"><span class="keyword">let</span> b: B | A;</span><br><span class="line"></span><br><span class="line">a = b;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>OBS: O tipo resultante de <code>A | B</code> será um tipo com todas as propriedades comuns a <code>A</code> e <code>B</code>. Equivalente a uma intercessão entre os tipos.</p>
</blockquote>
<h2 id="Associativa"><a href="#Associativa" class="headerlink" title="Associativa"></a>Associativa</h2><blockquote>
<p><code>(A | B) | C</code> é equivalente a <code>A | (B | C)</code></p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> A &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">class</span> B &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">class</span> C &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: (A | B) | C;</span><br><span class="line"><span class="keyword">let</span> b: A | (B | C);</span><br><span class="line"></span><br><span class="line">a = b;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>O tipo <code>S</code> pode ser associado ao tipo <code>T1 | T2</code> se <code>S</code> for do tipo <code>T1</code> ou <code>S</code> for do tipo <code>T2</code>.</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">x = <span class="string">'olá'</span>; <span class="comment">// OK</span></span><br><span class="line">x = <span class="number">42</span>; <span class="comment">// OK</span></span><br><span class="line">x = &#123; &#125;; <span class="comment">// Erro</span></span><br></pre></td></tr></table></figure>
<h2 id="Outros-casos-notaveis"><a href="#Outros-casos-notaveis" class="headerlink" title="Outros casos notáveis"></a>Outros casos notáveis</h2><h3 id="Heranca"><a href="#Heranca" class="headerlink" title="Herança"></a>Herança</h3><blockquote>
<p><code>A | B</code> é equivalente a <code>A</code> se <code>B</code> é um subtipo de <code>A</code></p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> A &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">class</span> B <span class="keyword">extends</span> A &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: A;</span><br><span class="line"><span class="keyword">let</span> b: A | B;</span><br><span class="line"></span><br><span class="line">a = b;</span><br></pre></td></tr></table></figure>
<h3 id="Propriedades"><a href="#Propriedades" class="headerlink" title="Propriedades"></a>Propriedades</h3><blockquote>
<p>O tipo <code>A | B</code> tem uma propriedade <code>P</code> do tipo <code>X | Y</code> se á tiver uma propriedade <code>P</code> do tipo <code>X</code> e <code>B</code> tiver uma propriedade <code>P</code> do tipo <code>Y</code>. Essas propriedades precisam ter o mesmo tipo de acessor, ou seja precisam ser ao mesmo tempo <code>public</code>, <code>private</code> or <code>protected</code>.</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> A &#123; prop: <span class="built_in">number</span>; &#125;</span><br><span class="line"><span class="keyword">class</span> B &#123; prop: <span class="built_in">string</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x: A | B;</span><br><span class="line"><span class="keyword">let</span> y = x.prop; <span class="comment">// o tipo de y é number | string</span></span><br></pre></td></tr></table></figure>
<h3 id="Funcoes"><a href="#Funcoes" class="headerlink" title="Funções"></a>Funções</h3><p>A mesma regra aplicada às propriedades exibida no item anterior também se aplica a funções.</p>
<blockquote>
<p>Em <code>A | B</code> se <code>A</code> e <code>B</code> tiverem uma função com o mesmo nome <code>X</code>, o tipo resultante terá uma função <code>X</code> identica, caso a funçao <code>X</code> seja identica em <code>A</code> e <code>B</code> ou sobrecarregada caso a função <code>X</code> possua assinatura diferente em <code>A</code> e <code>B</code>.</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> A &#123;</span><br><span class="line">	fn1(a: <span class="built_in">number</span>): <span class="built_in">string</span> &#123; <span class="keyword">return</span> <span class="string">""</span>; &#125;</span><br><span class="line">	fn2(): <span class="built_in">void</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> B &#123;</span><br><span class="line">	fn1(b: <span class="built_in">string</span>): <span class="built_in">number</span> &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	fn2(): <span class="built_in">void</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x: A | B;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Aqui a função fn2 é do tipo: ((a: number) =&gt; string | (b: string) =&gt; number)</span></span><br><span class="line"><span class="keyword">let</span> fn2 = x.fn1;</span><br><span class="line"><span class="comment">// Aqui a função fn3 é do tipo: () =&gt; void</span></span><br><span class="line"><span class="keyword">let</span> fn3 = x.fn2;</span><br></pre></td></tr></table></figure>
<h3 id="Inferencia"><a href="#Inferencia" class="headerlink" title="Inferência"></a>Inferência</h3><p>Numa operação ternária entre valores de tipos diferentes <code>... ? a : b</code> o tipo do valor resultante será <code>A | B</code>.</p>
<p>Numa operação lógica <code>ou</code> entre valores de tipos diferentes <code>a || b</code> o tipo do valor resultante será <code>A | B</code>.</p>
<p>Num array de elementos de tipos diferentes <code>[a, b, c, ...]</code> o tipo deste array será inferido para <code>A | B | C | ...</code>.</p>
<h3 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h3><p>Este post foi totalmente teórico e muito dos comportamentos descritos aqui podem ser percebidos de forma intuitiva, no entando, é sempre bom entender um pouco mais esses fundamentos. Até a próxima!</p>
<blockquote>
<p>Reference: TS v1.4 <a href="https://github.com/Microsoft/TypeScript/pull/824" target="_blank" rel="noopener">https://github.com/Microsoft/TypeScript/pull/824</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
            <category> TypeScript v1.4 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Configurando o TypeScript 2.0 Beta no VSCode]]></title>
      <url>http://diullei.com/2016/07/14/TypeScript2-Beta-no-vscode/</url>
      <content type="html"><![CDATA[<p>Tenho escrito alguns posts falando sobre as novidades do <a href="/posts/TypeScript2-Beta-nun-nullable-types">TypeScript 2.0 Beta</a> que foi lançado há alguns dias e algumas pessoas vieram me perguntar como utilizar essa nova versão no Visual Studio Code (<a href="https://code.visualstudio.com" target="_blank" rel="noopener">vscode</a>). Resolvi escrever este post para mostrar com é fácil fazer esta configuração. O legal é que podemos fazer esta configuração por projeto, ou seja, posso ter projetos diferentes utilizando versões diferentes do TypeScript sem a necessidade de alterar a minha instalação global :)</p>
<h2 id="Configurando-um-novo-projeto"><a href="#Configurando-um-novo-projeto" class="headerlink" title="Configurando um novo projeto"></a>Configurando um novo projeto</h2><p>Crie um diretório para o seu projeto e execute dentro deste diretório o seguinte comando:</p>
<pre><code>npm init -y
</code></pre><p>Isso irá criar um arquivo de configuração padrão do <code>npm</code> chamado <code>package.json</code>. Agora vamos instalar a versão desejada do TypeScript. No nosso caso vamos instalar a versão 2.0 Beta:</p>
<pre><code>npm install typescript@beta
</code></pre><p>Esse comando irá instalar o TypeScript dentro de uma pasta local chamada <code>node_modules</code>. Feito isso vamos abrir o vscode e criar um outro arquivo de configuração que irá informar ao vscode que ele deverá utilizar a versão do TypeScript instalada dentro da pasta <code>node_modules</code> local.</p>
<p>Abra o vscode e vá em <code>File &gt; Preferences &gt; Workspace Settings</code>. note que serão abertos 2 arquivos lado a lado. O arquigo <code>settings.json</code> será criado dentro de um diretório chamado <code>.vscode</code> e é esse arquivo que iremos alterar para informar ao vscode que sempre que estivermos neste diretório a versão do TypeScript que deverá ser utilizada será a versão 2.0 Beta instalada via <code>npm</code>. Para isso altere o conteúdo deste arquivo para o seguinte:</p>
<pre><code>{
    &quot;typescript.tsdk&quot;: &quot;node_modules/typescript/lib&quot;
}
</code></pre><p>Feito isso salve o arquivo. Pronto! Vamos agora testar para entender se tudo foi configurado corretamente. Crie um arquivo chamado <code>tsconfig.json</code> e insira o seguinte código:</p>
<pre><code>{
    &quot;compilerOptions&quot;: {
        &quot;target&quot;: &quot;es5&quot;,
        &quot;module&quot;: &quot;commonjs&quot;,
        &quot;moduleResolution&quot;: &quot;node&quot;,
        &quot;isolatedModules&quot;: false,
        &quot;jsx&quot;: &quot;react&quot;,
        &quot;experimentalDecorators&quot;: true,
        &quot;emitDecoratorMetadata&quot;: true,
        &quot;declaration&quot;: false,
        &quot;noImplicitAny&quot;: true,
        &quot;noImplicitUseStrict&quot;: true,
        &quot;removeComments&quot;: true,
        &quot;noLib&quot;: false,
        &quot;preserveConstEnums&quot;: true,
        &quot;suppressImplicitAnyIndexErrors&quot;: true,
        &quot;strictNullChecks&quot;: true
    },
    &quot;exclude&quot;: [
        &quot;node_modules&quot;
    ]
}
</code></pre><p>Agora crie um novo arquivo chamado <code>exemplo.ts</code> e insirea o seguinte código:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> names: <span class="built_in">string</span>[] | <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error! 'names' is possibly undefined.</span></span><br><span class="line"><span class="keyword">let</span> upperCased = names!.map(<span class="function"><span class="params">s</span> =&gt;</span> s.toUpperCase());</span><br></pre></td></tr></table></figure>
<p>Feito isso tente compilar esse código com o comando <code>Ctrl+shift+B</code>. Repare que o vscode irá exibir uma mensagem dizendo: <code>No task runner configured</code>. Clique no botão <code>Configue Task Runner</code> exibido ao lado direito dessa mensagem e selecione <code>TypeScript - tsconfig.json</code> na lista de opções que será exibida. Com isso o vscode irá criar um novo arquivo dentro da pasta <code>.vscode</code> chamado <code>tasks.json</code>. Altere a linha <code>&quot;command&quot;: &quot;tsc&quot;</code> para <code>&quot;command&quot;: &quot;node_modules/.bin/tsc&quot;</code>. Reinicie o vscode e tente executar novamente o comando de build <code>Ctrl+shift+B</code>.</p>
<p>Se tudo foi configurado corretamente o vscode irá compilar o código do arquivo <code>exemplo.ts</code> utilizando a versão local do TypeScript configurada. Note que se você remover o operador <code>!</code> da linha 4 o vscode já ira informar um erro parecido com <code>&#39;names&#39; is possibly undefined</code>.</p>
<p>É isso. Agora você já pode testar novas features do TypeScript 2.0 no vscode \o/</p>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
            <tag> VSCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TypeScript - Union Types]]></title>
      <url>http://diullei.com/2016/07/13/union-types/</url>
      <content type="html"><![CDATA[<p>Uma das caracteristicas do JavaScript é que podemos facilmente alterar o tipo de uma variável em tempo de execução simplesmente atribuindo um valor de tipo diferente a esta variável. No momento em que o valor é atribuido o tipo desta variável se altera e a partir daí inúmeros bugs podem surgir se não estivermos atentos.</p>
<p>Em Typecript quando declaramos uma variável com um tipo específico, <code>string</code> por exemplo, ela carregará este tipo até o fim, ou seja, em nenhum momento será permitida a atribuição de um valor de tipo diferente nesta variável.</p>
<pre><code>let val: string;
// Erro! val só pode receber um valor do tipo string
val = false;
</code></pre><p>O que ocorre é que em JavaScript ocasionalmente teremos variáveis ou parâmetros que irão esperar receber em momentos diferentes, valores de tipos diferentes. Quando configuramos uma requisição ajax no <code>jQuery</code> por exemplo (<a href="http://api.jquery.com/jquery.ajax/" target="_blank" rel="noopener">jQuery ajax doc</a>), a propriedade <code>jsonp</code> pode assumir o valor <code>false</code> ou um valor do tipo <code>string</code>. Prevendo esse comportamente o TypeScript definiu um tipo chamado <code>any</code>. Esse tipo aceita qualquer valor de qualquer tipo. O problema aqui é que nem sempre declarar uma variável como <code>any</code> resolverá nosso problema. Pra que isso fique bem claro vamos a um exemplo:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Takes a string and adds "padding" to the left.</span></span><br><span class="line"><span class="comment"> * If 'padding' is a string, then 'padding' is appended to the left side.</span></span><br><span class="line"><span class="comment"> * If 'padding' is a number, then that number of spaces is added to the left side.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">value: <span class="built_in">string</span>, padding: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">"number"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>(padding + <span class="number">1</span>).join(<span class="string">" "</span>) + value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">"string"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> padding + value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Expected string or number, got '<span class="subst">$&#123;padding&#125;</span>'.`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">padLeft(<span class="string">"Hello world"</span>, <span class="number">4</span>); <span class="comment">// retorna "    Hello world"</span></span><br></pre></td></tr></table></figure>
<p>Note que no código acima o parâmetro <code>padding</code> está sendo declarado como <code>any</code>. O que não impede que que passemos um valor diferente de <code>string</code> ou <code>number</code> como por exemplo o valor <code>true</code>. O código acima compila normalmente sem nenhum erro mas falha no momento da execução.</p>
<pre><code>// compila sem erros mas falha no momento da execução
let indentedString = padLeft(&quot;Hello world&quot;, true);
</code></pre><p>Para contornar esse problema o TypeScript possui uma classe especial de declaração de tipos chamado de “union types” que permite definir no momento da escrita do código quais os valores que serão aceitos pelo parâmetro ou pela variável. Para isso utilizamos o operador <code>|</code>. Veja que no código acima que queremos que <code>padding</code> seja um parâmetros de tipo menos permissivo e aceite apenas valores do tipo <code>string</code> ou <code>number</code> e para isso alteramos a assinatura do tipo de <code>any</code> para <code>string | number</code>. Vamos alterar a assinatura da função <code>padLeft</code> para demonstrar esse recurso:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">value: <span class="built_in">string</span>, padding: <span class="built_in">string</span> | <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// erro durante a compilação</span></span><br><span class="line"><span class="keyword">let</span> indentedString = padLeft(<span class="string">"Hello world"</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>Agora temos uma falha no momento da compilação do código. O que aconteceu? O compilador do TypeScript entendeu que <code>padding</code> pode assumir apenas um valor <code>string</code> ou <code>number</code>.</p>
<p>Veja como esse recurso nos ajuda a proteger o código de possíveis erros que passariam despercebidos.</p>
<p>É isso. Até a próxima!</p>
<blockquote>
<p>Reference: TS v1.4 <a href="https://github.com/Microsoft/TypeScript/pull/824" target="_blank" rel="noopener">https://github.com/Microsoft/TypeScript/pull/824</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
            <category> TypeScript v1.4 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TypeScript 2.0 Beta - Non nullable types (Tipos não nulos)]]></title>
      <url>http://diullei.com/2016/07/12/TypeScript2-Beta-nun-nullable-types/</url>
      <content type="html"><![CDATA[<p>O TypeScript 2.0 Beta desembarcou com muitas novidades. <a href="https://blogs.msdn.microsoft.com/typescript/2016/07/11/announcing-typescript-2-0-beta/" target="_blank" rel="noopener">Veja aqui</a> o post original no blog da Microsoft. No decorrer dos próximos posts vou falar um pouco mais sobre as features dessa nova versão. Para iniciar, hoje quero falar sobre um dos recursos que eu já estava acompanhando e achei muito legal: a definição de tipos não nulos.</p>
<p>Antes, para que possamos seguir com os exemplo que irei colocar aqui no post vamos instalar essa nova versão:</p>
<pre><code>npm install -g typescript@beta
</code></pre><blockquote>
<p>Com este release você já pode testar (caso não tenha testado ainda) a utilização dos <code>dts</code>s direto do npm. Escrevi sobre isso nesse <a href="/posts/The-Future-of-Declaration-Files">outro artigo</a>.</p>
</blockquote>
<h2 id="Tipos-nao-nulos-Non-nullable-Types"><a href="#Tipos-nao-nulos-Non-nullable-Types" class="headerlink" title="Tipos não nulos (Non-nullable Types)"></a>Tipos não nulos (Non-nullable Types)</h2><p>Essa feature sem dúvidas é uma das mais legais dessa nova versão. <code>null</code> e <code>undefined</code> são a origem comum de quase todos os bugs introduzidos durante a programação em JavaScript onde <code>null</code> se aplica a objetos e <code>undefined</code> a variáveis, propriedades e funções (pretendo falar mais sobre isso em outro artigo). Nas versões anteriores do TypeScript o tipo <code>null</code> e o <code>undefined</code> faziam parte do dominio de todos os outros tipos, ou seja, uma variável declarada como <code>string</code> poderia em algum momento assumir um valor <code>null</code>. Com o TypeScript 2.0 a utilização do novo flag <code>--strictNullChecks</code> durante a compilação muda essa lógica. Agora uma variável do tipo <code>string</code> passar a ser apenas do tipo <code>string</code> e nada mais. Exemplo:</p>
<pre><code>let valor: string = null; // Error
</code></pre><p>Mas pera ai, e seu eu quiser que a variável <code>valor</code> aceite tanto um valor do tipo <code>string</code> quanto um valor nulo? Simples, basta utilizar o recurso <a href="/posts/union-types"><code>union types</code></a>. Exemplo:</p>
<pre><code>let valor: string | null = null; // Ok!
</code></pre><p>Isso transfere para o desenvolvedor a decisão de aceitar ou não um valor <code>null</code> ou <code>undefined</code> e protege o código contra bugs que passariam despercebidos.</p>
<p>Agora observe o seguinte trecho de código:</p>
<pre><code>declare let names: string[] | undefined;

// Error! &apos;names&apos; is possibly undefined.
let upperCased = names.map(s =&gt; s.toUpperCase());
</code></pre><p>No exemplo acima teremos um erro. O compilador do TypeScript entende que <code>names</code> pode ser <code>undefined</code> devido a sua declaração <code>string[] | undefined</code>. Mas se tivermos certeza de que nesse caso <code>names</code> nunca será <code>undefined</code> e quisermos que este código execute mesmo assim podemos utilizar o operador <code>!</code> como a seguir:</p>
<pre><code>let upperCased = names!.map(s =&gt; s.toUpperCase());
</code></pre><p>Ao utilizar o oerador <code>!</code> na variável <code>names!</code> estamos dizendo ao compilador que temos certeza de que essa variável nunca será <code>undefined</code> neste ponto do código.</p>
<h3 id="Aplicacao-em-parametros-e-propriedades-opcionais"><a href="#Aplicacao-em-parametros-e-propriedades-opcionais" class="headerlink" title="Aplicação em parâmetros e propriedades opcionais"></a>Aplicação em parâmetros e propriedades opcionais</h3><p>Uma ressalva com relação a declarações opcionais. Todo parâmetro ou propriedade opcional tem de forma automática o tipo <code>undefined</code> agregado ao seu tipo original, mesmo quando isso não é declarado de forma explicita no código. por exemplo:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Compilado com --strictNullChecks</span></span><br><span class="line"><span class="keyword">type</span> T1 = <span class="function">(<span class="params">x?: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">string</span>;              <span class="comment">// x é do tipo: number | undefined</span></span><br><span class="line"><span class="keyword">type</span> T2 = <span class="function">(<span class="params">x?: <span class="built_in">number</span> | <span class="literal">undefined</span></span>) =&gt;</span> <span class="built_in">string</span>;  <span class="comment">// x é do tipo: number | undefined</span></span><br></pre></td></tr></table></figure>
<p>por isso um parâmetro ou propriedade opcional sempre será nullable.</p>
<blockquote>
<p>NOTA: Para compilar os exemplos de código acima via linha de comando basta salvar o codigo em um arquivo e executar: <code>tsc file.ts --strictNullChecks</code></p>
</blockquote>
<p>É isso aí pessoal, até a próxima!</p>
<blockquote>
<p>Reference: TS v2.0 <a href="https://github.com/Microsoft/TypeScript/pull/7140" target="_blank" rel="noopener">https://github.com/Microsoft/TypeScript/pull/7140</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
            <category> TypeScript v2.0 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DefinitelyTyped + TypeScript team = TS FTW]]></title>
      <url>http://diullei.com/2016/07/11/DefinitelyTyped-and-TypeScript-Team/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/DefinitelyTyped/DefinitelyTyped" target="_blank" rel="noopener"><br>  <div style="text-align:center"><img src="/images/dt-logo.png"></div><br></a></p>
<p>Passando rápido aqui para falar de uma parceria muito legal que irá somar muito para a comunidade TypeScript, na realidade já começou a somar!</p>
<p>Por alguns anos nós do time <a href="https://github.com/DefinitelyTyped/DefinitelyTyped" target="_blank" rel="noopener">DefinitelyTyped</a> temos nos esforçado muito para manter o repositório atualizado e servir os melhores <code>dts</code>s. Não é uma tarefa fácil, somos um time bastante distribuído pelo mundo, temos gente do Japão, Holanda, EUA, Australia, Russia, Brasil :) entre outros lugares… todos temos nossos afazeres, nosso trabalho e tarefas pessoais e por dedicação temos cedido parte do nosso tempo ajudando essa comunidade que tem se tornado cada vez mais forte a crescer. Hoje contamos com quase 2000 dts, fruto de muito esforço de muitos membros da comunidade juntamente com nosso time.</p>
<p>O time do <a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a> sempre se manteve perto da gente acompanhando nossa evolução e trabalho, e recentemente tivemos o prazer de receber um apoio muito bem vindo! O Time do TypeScript se agregou ao time DefinitelyTyped e desde então começaram a nos ajudar com os PR’s. Há um mês atraz mais ou menos tinhamos pelo menos uns 200 PR’s pendentes/dia, muita contribuição para dar conta rs… e agora com essa ajuda de peso estamos conseguindo manter uma média de 50 PR’s pendentes/dia. Tem sido uma parceria muito legal.</p>
<p>Um dos primeiros passos foi levar os dts’s para o npm (falei um pouco sobre isso <a href="/2016/07/09/The-Future-of-Declaration-Files/">neste artigo</a>), e isso não para por ai, o DefinitelyTyped definitivamente faz parte do ciclo de desenvolvimento em TypeScript e muita coisa boa está por vir. Não posso adiantar muita coisa ainda, mas o que posso dizer é que todos nós ganharemos muito com tudo o que está sendo planejado.</p>
<p>Espero logo logo trazer mais novidades!</p>
<p>Abraços!</p>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
            <category> DefinitelyTyped </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TypeScript e o futuro dos arquivos de declaração]]></title>
      <url>http://diullei.com/2016/07/09/The-Future-of-Declaration-Files/</url>
      <content type="html"><![CDATA[<p>Alguns anos se passaram desde que a primeira versão do TypeScript veio a público. Agora quando a versão 2.0 está quase sendo lançada vemos o quanto esse projeto evoluiu. Uma das mudanças significativas desta nova versão é com relação aos arquivos de definição.</p>
<p>Até hoje, para encontrar um arquivo de definição nós tinhamos 2 opções: ir até o repositório do <a href="https://github.com/DefinitelyTyped/DefinitelyTyped" target="_blank" rel="noopener">DefinitelyTyped</a> no github e baixar manualmente o arquivo ou utilizar uma das ferramentas criadas para automatizar esse trabalho, o <a href="https://github.com/DefinitelyTyped/tsd" target="_blank" rel="noopener">TSD</a> ou o <a href="https://github.com/typings/typings" target="_blank" rel="noopener">typings</a>.</p>
<p>Pensando em melhorar esse trabalho o time do TypeScript está colocando suporte à instalaçao desses arquivos direto do <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a>. Como um dos administradores do grupo DefinitelyTyped eu me sinto muito feliz por saber que fizemos parte dessa mudança ajudando o time do TypeSript a entender como os membros da comunidade desenvolvem e utilizam esses arquivos. O DefinitelyTyped se tornou o repositório central dos arquivos de definição para o Typescript e é a partir dele que os pacotes no npm são gerados.</p>
<p>Agora para instalar por exemplo a definição do <code>lodash</code> podemos utilizar a seguinte linha de comando:</p>
<pre><code>npm install --save @types/lodash
</code></pre><p>Com isso seremos capazes de utilizar o <code>lodash</code> no nosso código TypeScript. Exemplo:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import * as _ from &quot;lodash&quot;;</span><br><span class="line">_.padStart(&quot;Hello TypeScript!&quot;, 20, &quot; &quot;);</span><br></pre></td></tr></table></figure>
<p>Uma lista de todas as tipagens disponíveis pode ser encontrada neste link: <a href="https://aka.ms/types" target="_blank" rel="noopener">https://aka.ms/types</a>.</p>
<p>Se você nao quiser esperar até o release da versão 2.0 você pode instalar o nightly builds. Apenas execute:</p>
<pre><code>npm install -g typescript@next
</code></pre><p>Ferramentas como o TSD e o typings continuarão funcionando mas com certeza será muito mais interessante utilizar o npm.</p>
<p>Bem, é isso, Até a próxima!</p>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
            <category> TypeScript v2.0 </category>
            
            <category> DefinitelyTyped </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spread Operator (Operador de Propagação)]]></title>
      <url>http://diullei.com/2016/02/05/spread-operator/</url>
      <content type="html"><![CDATA[<p>No ultimo artigo eu falei de forma bem rapida e simple sobre um recurso muito interessante do TypeScript <code>rest parameters</code>. Seguindo esta mesma linha hoje eu quero falar sbore um outro recuro muito legal chamado <code>spread operator</code>.</p>
<p>O <code>Spread Operator</code> (Operador de Propagação) permite que uma expressão seja expandida em locais onde são esperados vários argumentos (chamadas de função) ou múltiplos elementos (arrays literais).</p>
<p>Para entender melhor este recurso, como de costume vamos a um exemplo:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function myFunc(...val: string[]) &#123;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let animals = [&apos;dog&apos;, &apos;cat&apos;];</span><br><span class="line"></span><br><span class="line">myFunc(&apos;dog&apos;, &apos;cat&apos;);</span><br><span class="line"></span><br><span class="line">myFunc(...animals);</span><br></pre></td></tr></table></figure>
<p>Veja que a função <code>myFunc</code> possui um parâmetro do tipo <a href="/posts/rest-parameters"><code>rest parameter</code></a>. Para entender sobre <code>rest parameter</code> veja o meu <a href="/posts/rest-parameters">ultimo artigo</a>. Esta função pode ser chamada opcionalmente passando um array seguindo a mesma sintaxe usada na assinatura da função <code>...</code>:</p>
<pre><code>myFunc(...animals);
</code></pre><p>onde <code>animals</code> é o nosso array: <code>let animals = [&#39;dog&#39;, &#39;cat&#39;];</code></p>
<h2 id="Recuperando-valores-com-destrutores"><a href="#Recuperando-valores-com-destrutores" class="headerlink" title="Recuperando valores com destrutores"></a>Recuperando valores com destrutores</h2><p>Podemos facilmente recuperar os valores dentro da função <code>myFunc</code> utilizando um recurso chamado <code>Destructuring</code> (Veremos este recurso com mais detalhes em outro artigo). Exemplo:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function myFunc(...val: string[]) &#123;</span><br><span class="line">    let [val1, val2] = val;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Note que estamos “destruindo” o valor do array <code>val</code> em 2 outras variáveis <code>val1</code> e <code>val2</code>. Sendo <code>val</code> um array, estamos criando uma variavel <code>val1</code> com o primeiro valor de <code>val</code> e uma outra variavel <code>val2</code> com o segundo valor de <code>val</code>.</p>
<p>Este recurso também pode ser utilizado na construção de arrays:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> array2 = [<span class="number">0</span>, ...array1, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br></pre></td></tr></table></figure>
<p>onde retemos o valor de <code>array2</code> como: <code>[0, 1, 2, 3, 4, 5, 6]</code>.</p>
<p>Aqui temos outro exemplo concatenando 2 arrays usando a função <code>push</code>:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr1.push(...arr2);</span><br></pre></td></tr></table></figure>
<p>O código acima seria similar à utilização da função <a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank" rel="noopener"><code>concat</code></a>.</p>
<p>Este reurso está definido na especificação do ES6 e não foi totalmente implementado no TypeScript ainda. Exemplo de sintax que ainda não funciona no TypeScript mas que já pode ser testado utilizando o babeljs por exemplo:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function foo(x, y, z) &#123; &#125;</span><br><span class="line">let args = [0, 1, 2];</span><br><span class="line">foo(...args);</span><br></pre></td></tr></table></figure>
<p>Repare que no exemplo acima o valor do array <code>args</code> está sendo “destruído” para alimentar os argumentos da função <code>foo</code>. Para saber mais sobre Spread Operators no ES6 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator" target="_blank" rel="noopener">acesse aqui</a>.</p>
<p>É isso, Abraços!</p>
<blockquote>
<p>Reference: TS v1.5 <a href="https://github.com/Microsoft/TypeScript/pull/1931" target="_blank" rel="noopener">https://github.com/Microsoft/TypeScript/pull/1931</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
            <category> TypeScript v1.5 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TypeScript - Rest Parameters]]></title>
      <url>http://diullei.com/2016/01/15/rest-parameters/</url>
      <content type="html"><![CDATA[<p>Hoje vou falar rapidamente sobre um recurso muito legal do TypeScript: rest parameters. Se você programa em C# você vai entender bem o conceito, é uma feature similar ao <a href="https://msdn.microsoft.com/en-us/library/w5zay9db.aspx" target="_blank" rel="noopener"><code>params</code></a>.</p>
<p>No TypeScript este recurso nos permite recuperar todos os parâmetros informados para uma função como um unico argumento do tipo array. Para entender melhor nada melhor do que um exemplo:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function buildName(firstName: string, ...restOfName: string[]) &#123;</span><br><span class="line">	return firstName + &quot; &quot; + restOfName.join(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let employeeName = buildName(&quot;Diullei&quot;, &quot;de&quot;, &quot;Moura&quot;, &quot;Gomes&quot;);</span><br><span class="line"></span><br><span class="line">//=&gt; Diullei de Moura Gomes</span><br></pre></td></tr></table></figure>
<p>Note que a assinatura desta função declara 2 parâmetros diferentes: <code>firstName: string</code> e <code>...restOfName: string[]</code>. Ao utilizarmos o símbolo <code>...</code> na declaração do segundo argumento estamos dizendo ao compilador que todos os argumentos passados a para a função <code>buildName</code> a partir do segundo serão agrupados em um array do tipo <code>string</code>. Note que o operador <code>...</code> só pode ser aplicado a um argumento do tipo <code>array</code> e que este precisa ser sempre o ultimo argumento da função. Este recurso é chamado de <code>Rest Parameter</code>.</p>
<p>Este não é um recurso original do TypeScript e já havia sido definido para o ES6 (<a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Functions/rest_parameters" target="_blank" rel="noopener">para saber mais sobre rest parameters no ES6</a>).</p>
<p>Abraços!</p>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
            <category> TypeScript v1.0 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Testando o TypeScript no VSCode (Visual Studio Code)]]></title>
      <url>http://diullei.com/2015/12/03/TypeScript-vscode/</url>
      <content type="html"><![CDATA[<p>O VSCode é um editor multiplataforma criado pela Microsoft destinado ao desenvolvimento de diversas aplicações contando com o suporte a várias linguagens de programação. O Visual Studio Code foi criado pelo time da Microsoft usando uma mistura de tecnologias de código aberto e baseadas na web, como o Chromium, o Electron app framework do GitHub e o próprio editor Monaco da Microsoft.</p>
<blockquote>
<p>Para facilitar a escrita a partir de agora sempre irei me referir ao visual Studio Code simplesmente como VSCode.</p>
</blockquote>
<h2 id="Instalando-o-VSCode"><a href="#Instalando-o-VSCode" class="headerlink" title="Instalando o VSCode"></a>Instalando o VSCode</h2><p>Para instalar o VSCode acesse a página do projeto <a href="https://www.visualstudio.com/en-us/products/code-vs.aspx" target="_blank" rel="noopener">https://www.visualstudio.com/en-us/products/code-vs.aspx</a> e vá até a seção Download. Selecione a versão do seu sistem operacional e sigua as isntruções de instalação.</p>
<h2 id="Criando-o-primeiro-projeto-TypeScript"><a href="#Criando-o-primeiro-projeto-TypeScript" class="headerlink" title="Criando o primeiro projeto TypeScript"></a>Criando o primeiro projeto TypeScript</h2><p>Neste pequeno tutorial iremos criar um projeto TypeScript simples. Para iniciar crie um novo diretório chamado <code>MyProject</code>.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir MyProject</span><br></pre></td></tr></table></figure>
<p>Abra o VSCode e abra o diretório MyProject de dentro do VSCode.</p>
<p><img src="../images/image006.jpg" alt=""></p>
<p>Agora, usando o sidebar Explorer, vamos adicionar um novo arquivo chamado <code>tsconfig.json</code>.</p>
<p><img src="../images/image007.jpg" alt=""></p>
<p>Digite <code>{ }</code> e com o cursor no meio das chaves pessione Ctrl+SPACE para abrir as opções disponíveis:</p>
<p><img src="../images/image008.jpg" alt=""></p>
<p>Selecione <code>compilerOptions</code> e pressione ENTER. Vamos configurar o output do projeto para ES5, modulo do tipo AMD e emissão de source maps.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">		<span class="attr">"target"</span>: <span class="string">"ES5"</span>,</span><br><span class="line">		<span class="attr">"module"</span>: <span class="string">"amd"</span>,</span><br><span class="line">		<span class="attr">"sourceMap"</span>: <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Agora vamos adicionar um novo arquivo chamado <code>main.ts</code>. Adicione o seguinte código:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    private _name: string;</span><br><span class="line"></span><br><span class="line">    constructor(name: string) &#123;</span><br><span class="line">        this._name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public getName() &#123;</span><br><span class="line">        return this._name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var person = new Person(&apos;joão&apos;);</span><br><span class="line"></span><br><span class="line">console.log(person.getName());</span><br></pre></td></tr></table></figure>
<p>Tente compilar o projeto teclando <code>Ctrl-Shift-B</code>. Note que o VSCode irá exibir uma mensagem dizendo que não temos uma <code>task</code> configurada para o nosso projeto (Para saber mais sobre as tasks do vscode acesse: <a href="https://code.visualstudio.com/docs/editor/tasks" target="_blank" rel="noopener">https://code.visualstudio.com/docs/editor/tasks</a>).</p>
<p><img src="../images/image009.jpg" alt=""></p>
<p>Clique em <code>Configure Task Runner</code> para adicionar uma nova task. um novo arquivo chamado <code>tasks.json</code> será criado. Altere a linha que contém a chave <code>&quot;args&quot;: [&quot;HelloWorld.ts&quot;]</code> para <code>&quot;args&quot;: []</code> e em seguida tente compilar o projeto novamente utilizando <code>Ctrl-Shift-B</code>. O VSCode irá indicar na barra de status o status da compilação.</p>
<p><img src="../images/image010.jpg" alt=""></p>
<p>Note que caso existam erros os memos serão indicados nada barra de status e você poderá clicar em cima do indicador para obter mais detalhes.</p>
<p><img src="../images/image011.jpg" alt=""></p>
<p>Após a compilação o VSCode irá gerar os arquivos <code>main.js</code> e <code>main.js.map</code>. Trata-se do arquivo JavaScript gerado e do arquivo source map. Agora você pode utilizar o node via linha de comando para executar o código do arquivo main.js.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node main.js</span><br></pre></td></tr></table></figure>
<p>Esse foi um tutorial bem simpels onde tentei apresentar o vscode e mostrar como é fácil iniciar um pequeno projeto em TypeScript. As features do vscode são muito voltadas para o desenvolvimento em TypeScript e eu te incentivo a explorar os varios recursos deste editor.</p>
<p>Abraços!</p>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TypeScript Guide]]></title>
      <url>http://diullei.com/2015/06/22/TypeScript-Guide/</url>
      <content type="html"><![CDATA[<p>Comecei a escrever um e-book sobre TypeScript e acredito que este livro poderá contribuir muito no aprendizado desta nova linguagem. Desde o seu release publico a 3 anos atrás o TypeScript tem se mostrado muito promissor e assumido um espaço muito importante no desenvolvido de aplicativos JavaScript. Creio que o TypeScript, a medida que o tempo for passando, vai se tornar uma linguagem bem popular e ter um bom guia escrito em português será de boa ajuda para muitos.</p>
<p>Este livro é aberto a contribuições e pode ser acessar no endereço  <a href="https://github.com/Diullei/typescript-guide" target="_blank" rel="noopener">https://github.com/Diullei/typescript-guide</a>.</p>
<p><img src="/images/typescript-guide.jpg" alt=""></p>
<p>Estou escrevendo este livro utilizando o <a href="https://github.com/GitbookIO/gitbook" target="_blank" rel="noopener">GitBook</a>. Essa ferramenta é muito legal e vale apena conhecer se você estiver pensando em escrever um e-book :)</p>
<p>No momento o e-book ainda está em construção e não possui muito conteúdo mas espero que em poucos meses possamos ter bastante coisas legais por lá!</p>
<h3 id="Um-pouco-sobre-minhas-contribuicoes-com-TypeScript"><a href="#Um-pouco-sobre-minhas-contribuicoes-com-TypeScript" class="headerlink" title="Um pouco sobre minhas contribuições com TypeScript"></a>Um pouco sobre minhas contribuições com TypeScript</h3><p>Tenho me envolvido com TypeScript desde sua primeira versão. Fui um dos primeiros a ajudar com as dúvidas sobre TypeScript no StackOverflow e tive a oportunidade de ser o primeiro membro colaborador do repositório <a href="https://github.com/borisyankov/DefinitelyTyped" target="_blank" rel="noopener">DefinitelyTyped</a> no Github juntamente com <a href="https://github.com/borisyankov" target="_blank" rel="noopener">Boris Yankov</a> (por curiosidade fui o segundo a enviar <a href="https://github.com/borisyankov/DefinitelyTyped/commit/d0661c214948c6876657bc53e2b5bd473c255902" target="_blank" rel="noopener">Pull Request</a> para este repositório antes de ser agregado como colaborador, na época existiam apenas 12 tipagens diferentes, hoje contamos com mais de 1000). Este repositório veio a se tornar um dos repositórios mais indispensáveis para todos que desenvolvem em TypeScrpt atulamente contanto com a contribuição de mais de 1000 pessoas ao redor do mundo. Criei a organização <a href="https://github.com/DefinitelyTyped" target="_blank" rel="noopener">DefinitelyTyped</a> e fui o criador do <a href="https://github.com/DefinitelyTyped/tsd" target="_blank" rel="noopener">TSD - TypeScript package Manager</a>, ferramenta que tem feito parte do ciclo de desenvolvimento dos projetos que utilizam TypeScript atualmente (É possível utilizar o <a href="http://definitelytyped.org/tsd/" target="_blank" rel="noopener">site do TSD</a> para localizar as definições). Participei da criação do <a href="https://github.com/DefinitelyTyped/NugetAutomation/issues/1" target="_blank" rel="noopener">NugetAutomation</a>, projeto que automatiza a publicação dos arquivos tipados publicados no repositório DefinitelyTyped para o <a href="http://www.nuget.org/packages?q=Definitelytyped" target="_blank" rel="noopener">nuget</a>. recentemente me agregei ao time <a href="https://github.com/TypeStrong" target="_blank" rel="noopener">TypeStrong</a>, este time tem feito grandes contribuições principalmente no desenvolvimento do pacote <a href="https://atom.io/packages/atom-typescript" target="_blank" rel="noopener">atom-typescript</a>.</p>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tsi - um REPL TypeScript]]></title>
      <url>http://diullei.com/2013/08/24/tsi-um-REPL-TypeScript/</url>
      <content type="html"><![CDATA[<p>Resolvi testar um modelo de screencast onde eu posto videos bem pequenos e práticos. Neste video inicial eu vou mostrar uma ferramenta bem legal que encontrei no <a href="https://github.com/qiemem/tsi" target="_blank" rel="noopener">github</a>, um <a href="http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop" target="_blank" rel="noopener">REPL</a> typescript escrito pra <a href="http://nodejs.org/" target="_blank" rel="noopener">nodejs</a>.</p>
<p><a href="http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop" target="_blank" rel="noopener">REPL (Read–eval–print loop)</a> é um ambiente de programação iterativo que nos permite programar via linha de comando de forma dinamica.</p>
<iframe width="650" height="450" src="//www.youtube.com/embed/EW0rFjQGzXI" frameborder="0" allowfullscreen></iframe>

<p>Até a próxima!</p>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
            <tag> REPL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TypeScript - Usando bower e tsd para instalar componentes e suas definições]]></title>
      <url>http://diullei.com/2013/08/11/TypeScript-Usando-bower-e-tsd-para-instalar-componentes-e-suas-definicoes/</url>
      <content type="html"><![CDATA[<p>Há algum tempo atrás eu criei uma ferramenta(<a href="https://npmjs.org/package/tsd" target="_blank" rel="noopener">tsd</a>) que permite procurar e baixar via linha de comando vários arquivos de definição escritos em TypeScript. Estes arquivos são necessários caso você queira utilizar uma biblioteca como por exemplo o <code>jquery</code> ou o <code>backbone</code> com TypeScript. Para mais informações sobre arquivos de definição TypeScript veja <a href="/posts/TypeScript-Parte-1/#Tipos-declarados">este link</a>.</p>
<p><a href="https://twitter.com/joeriks" target="_blank" rel="noopener">Jonas Eriksson</a> gravou um video bem legal mostrando como utilizar o <a href="http://bower.io/" target="_blank" rel="noopener">bower</a> e o <a href="https://npmjs.org/package/tsd" target="_blank" rel="noopener">tsd</a> para instalar bibliotecas javascript junto com suas definições TypeScript no Visual Studio. O video ficou pequeno e bem objetivo. Segue abaixo:</p>
<iframe src="http://www.screenr.com/embed/QYKH" width="650" height="396" frameborder="0"></iframe>

<p>Até a próxima!</p>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
            <tag> Bower </tag>
            
            <tag> tsd </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TypeScript (Parte 1)]]></title>
      <url>http://diullei.com/2013/08/10/TypeScript-Parte-1/</url>
      <content type="html"><![CDATA[<p>Embora eu já tenha escrito uma introdução sobre o TypeScript em <a href="/posts/Introducao-ao-TypeScript/">outro artigo</a> resolvi voltar ao tema e dessa vez escrever uma série de artigos sobre TypeScript. Neste post estarei novamente introduzindo o TypeScript.</p>
<h2 id="Introducao"><a href="#Introducao" class="headerlink" title="Introdução"></a>Introdução</h2><p>Com o crescimento da internet e a necessidade cada vez maior de termos aplicações web expondo funcionalidades complexas de usabilidade no lado cliente <em>(FrontEnd)</em>, têm se ampliado cada vez mais o uso do <strong>JavaScript</strong> para suportar toda esta infinidade de programação diretamente no navegador web.</p>
<p>Nos últimos anos nossos computadores ficaram mais rápidos, nossos navegadores ficaram mais rápidos e com isso o <strong>JavaScript</strong> também teve seu curso de evolução natural ficando mais rápido devido ao grande investimento em tecnologia feito nos compiladores e ganhando inúmeros recursos. Hoje podemos ver uma explosão de frameworks surgindo a todo momento, falamos sobre MVC e padrões de projeto dentre outros assuntos como se estivessemos falando sobre linguagens clássicas como <em>C++</em>, <em>Java</em> ou <em>C#</em>.</p>
<p>O <strong>JavaScript</strong> já ultrapassou as fronteiras da web e hoje podemos desenvolver aplicativos nativos para sistemas operacionais como no desenvolvimento de aplicativos para o <em>Windows 8</em> por exemplo. Existem ainda outras tecnologias tais como <a href="http://www.adobe.com/devnet/air/quick_start_js.html" target="_blank" rel="noopener">Adobe AIR</a>, <a href="http://www.appcelerator.com/platform/titanium-sdk/" target="_blank" rel="noopener">Titanium</a>, <a href="http://phonegap.com/" target="_blank" rel="noopener">PhoneGap</a>, <a href="http://appjs.org/" target="_blank" rel="noopener">AppJS</a>, <a href="https://wiki.mozilla.org/B2G" target="_blank" rel="noopener">Boot2Gecko</a> e <a href="http://www.chromium.org/Home" target="_blank" rel="noopener">Chromium</a>. Estas são apenas algumas das plataformas que nos permitem desenvolver aplicativos para diversos sistemas operacionais.</p>
<h2 id="Usando-TypeScript-para-desenvolver-aplicacoes-de-grande-escala"><a href="#Usando-TypeScript-para-desenvolver-aplicacoes-de-grande-escala" class="headerlink" title="Usando TypeScript para desenvolver aplicações de grande escala"></a>Usando TypeScript para desenvolver aplicações de grande escala</h2><p>Com todo esse crescimento provocado pela adoção do <strong>JavaScript</strong> vem surgindo a preocupação em como gerenciar todo o código fonte produzido permitindo escalar esta produção da mesma forma que já acontece em outras linguagens de programação. Foi pensando nisso que a Microsoft lançou o <strong>TypeScript</strong>. Seu intuito é de ampliar a escala de construção de aplicativos fornecendo recursos avançados de analise de tipagem estática. O <strong>TypeScript</strong> leva o <strong>JavaScript</strong> para mais próximo dos desenvolvedores familiarizados com o conceito de orientação a objetos como programadores das linguagens <em>C#</em>, <em>C++</em>, <em>Java</em> entre outras.</p>
<p>O <strong>TypeScript</strong> é um projeto <a href="https://typescript.codeplex.com/" target="_blank" rel="noopener">OpenSource</a> totalmente compatível com todos os navegadores e sistemas operacionais que já suportam o <strong>JavaScript</strong>. Na prática qualquer código <strong>JavaScript</strong> pode ser utilizando dentro do <strong>TypeScript</strong> <em>(com algumas ressalvas que serão discutidas nos próximos posts)</em> sendo que o resultado final será sempre <strong>JavaScript</strong>, com a facilidade de poder antecipar diversos erros que só pegaríamos em tempo de execução graças ao seu compilador.</p>
<h2 id="JavaScript-e-TypeScript"><a href="#JavaScript-e-TypeScript" class="headerlink" title="JavaScript e TypeScript"></a>JavaScript e TypeScript</h2><p>Como exemplo, considere o seguinte exemplo de código <strong>JavaScript</strong>:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mensagem</span>(<span class="params">texto</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.texto = texto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mensagem.prototype.exibe = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"Olá, "</span> + <span class="keyword">this</span>.texto + <span class="string">"!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mensagem = <span class="keyword">new</span> Mensagem(&#123;<span class="attr">texto</span>: <span class="string">"Mundo"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.createElement(<span class="string">"button"</span>);</span><br><span class="line">button.innerText = <span class="string">"Diga Olá!"</span>;</span><br><span class="line"></span><br><span class="line">button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	alert(mensagem.exibe());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(button);</span><br></pre></td></tr></table></figure>
<p>Vamos compilar este código utilizando o compilador do <strong>TypeScrit</strong> para visualizar o código <strong>JavaScrit</strong> que será gerado. Para isso vamos utilizar o <a href="http://www.typescriptlang.org/Playground/" target="_blank" rel="noopener"><strong>TypeScript</strong> Playground</a>.</p>
<blockquote>
<p><a href="http://www.typescriptlang.org/Playground/" target="_blank" rel="noopener"><strong>TypeScript</strong> Playground</a> - Trata se de um compilador <strong>TypeScript</strong> online onde podemos testar qualquer código <strong>TypeScript</strong> e visualizar a saída de código <strong>JavaScript</strong> em tempo real.</p>
</blockquote>
<p><img src="https://raw.github.com/Diullei/diullei.github.com/master/_site/images/TypeScript_Parte1/0001.png" alt=""></p>
<p>Veja que na caixa a esquerda temos nosso código <strong>JavaScript</strong> original. Já na caixa a direita temos o código gerado pelo compilador do <strong>TypeScript</strong>, e você vai perceber que a saída de código é essencialmente parecida com o código <strong>JavaScript</strong> que foi introduzido, tirando algumas pequenas diferenças de espaço em branco.</p>
<p>No entanto esse código <strong>JavaScript</strong> tem um bug. Devido a natureza dinâmica do <strong>JavaScrpt</strong> este bug passou despercebido durante o desenvolvimento deste código. Basta executar o código e veremos o erro ocorrendo:</p>
<p><img src="https://raw.github.com/Diullei/diullei.github.com/master/_site/images/TypeScript_Pa
Veja que o construtor do objeto `Mensagem` esperava um argumento do tipo string mas o argumento passado foi um objeto. Esse erro poderia ter sido facilmente evitado se tivéssemos utilizado o recurso de definição de tipos do **TypeScript** (**type anotations**" alt="">. Para tanto vamos alterar o código original e definir para o construtor do objeto <code>Mensagem</code> que seu argumento deverá ser sempre do tipo string. Segue abaixo o código alterado:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mensagem</span>(<span class="params">texto: string</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.texto = texto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mensagem.prototype.exibe = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"Olá, "</span> + <span class="keyword">this</span>.texto + <span class="string">"!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mensagem = <span class="keyword">new</span> Mensagem(&#123;<span class="attr">texto</span>: <span class="string">"Mundo"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.createElement(<span class="string">"button"</span>);</span><br><span class="line">button.innerText = <span class="string">"Diga Olá!"</span>;</span><br><span class="line"></span><br><span class="line">button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	alert(mensagem.exibe());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(button);</span><br></pre></td></tr></table></figure>
<p>Ao tentar compilar este código o compilador do <strong>TypeScript</strong> nos dará um erro na linha 9 por que estamos tentanto passar um objeto como argumento de um construtor que espera receber um argumento do tipo string conforme foi definido. Vamos utilizar o <a href="http://www.typescriptlang.org/Playground/" target="_blank" rel="noopener"><strong>TypeScript</strong> Playground</a> para ver isso na prática.</p>
<p><img src="https://raw.github.com/Diullei/diullei.github.com/master/_site/images/TypeScript_Parte1/0003.png" alt=""></p>
<p>Ao alterarmos o código na linha 1 definindo o tipo do argumento <em>texto</em> do <strong>TypeScript</strong> passou a emitir um erro na linha 9. Veja este erro com mais detalhe na imagem abaixo:</p>
<p><img src="https://raw.github.com/Diullei/diullei.github.com/master/_site/images/TypeScript_Parte1/0004.png" alt=""></p>
<p>Veja que esta simples definição de tipo permitiu ao compilador nos fornecer uma experiência de codificação muito melhor do que a que tivemos antes. Agora temos uma verificação estática do nosso código e um erro totalmente detalhado. Tendo esse ferramental a disposição conseguimos facilmente identificar e resolver o problema que antes havia passado por despercebido.</p>
<p>Tendo uma definição de tipos bem feita podemos ter um <em>IntelliSense</em> de qualidade se estivermos utilizando uma <em>IDE</em> com suporte ao <strong>TypeScript</strong>. Veja por exemplo na imagem abaixo um <em>autoComplete</em> gerado quando tentamos acessar os membros do argumento <em>texto</em> da função <code>Mensagem</code>.</p>
<p><img src="https://raw.github.com/Diullei/diullei.github.com/master/_site/images/TypeScript_Parte1/0005.png" alt=""></p>
<p><img src="https://raw.github.com/Diullei/diullei.github.com/master/_site/images/TypeScript_Parte1/0006.png" alt=""></p>
<h1 id="Tipos-declarados">Tipos declarados</h1>

<p>Vimos no tópico anterior que podemos escrever um código <strong>TypeScript</strong> definindo tipos e vimos o quanto isso pode ser util nos fornecendo uma checagem do código em tempo de compilação. Um outro recurso muito util do <strong>TypeScript</strong> é a possibilidade de “tipar” um código <strong>JavaScript</strong> existente. Isso é feito utilizando a palavra chave <code>declare</code>.</p>
<p>digamos que a função <code>Mesagem</code> que estamos utilizando em nos exemplo já existisse em um arquivo <strong>JavaScript</strong> externo.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mensagem</span>(<span class="params">texto</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.texto = texto</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mensagem.prototype.exibe = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Olá, "</span> + <span class="keyword">this</span>.texto + <span class="string">"!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Agora queremo utilizar este método em nosso arquivo <strong>TypeScript</strong>. Sabemos que o arquivo acima será carregado em nossa página e se estivessemos escrevendo em <strong>JavaScript</strong> bastaria escrever um código que utilize está função e no momento em que este código fosse executado ele chamaria a função <code>Mensagem</code> como desejado. Como estamos escrevendo o código em <strong>TypeScript</strong> teremos um erro no momento da compilação por que a função <code>Mensagem</code> não está sendo definida no código <strong>TypeScript</strong>. Para resolver iremos declarar apenas a assinatura da função <code>Mensagem</code> como no código abaixo:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="keyword">var</span> Mensagem: <span class="function">(<span class="params">texto: string</span>) =&gt;</span> any</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Isso diz ao <strong>TypeScript</strong> que existe uma função chamada <code>Mensagem</code> que recebe um string com argumento e retorna um tipo qualquer. Note que estamos usando a palavra-chave <code>declare</code>. Esta função náo será criada quando o arquivo <strong>JavaScript</strong> for gerado pois serve apenas de apoio para o compilador. O código <strong>TypeScript</strong> poderia ficar assim:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="keyword">var</span> Mensagem: <span class="function">(<span class="params">texto: string</span>) =&gt;</span> any</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mensagem = <span class="keyword">new</span> Mensagem(<span class="string">"Mundo"</span>)</span><br></pre></td></tr></table></figure>
<p>É possível “tipar” qualquer código <strong>JavaScript</strong>. Podemos “tipar” por exemplo o <code>backbone</code> ou o <code>jquery</code> e utilizar todo o poder da definição de tipos e outros recursos do <strong>TypeScript</strong> com estas bibliotecas existentes. Com isso teremos por exemplo auto-complete se estivermos utilizando uma <em>IDE</em> com suporte ao <strong>TypeScript</strong> e validação de tipos em tempo de compilação. Na realidade a comunidade <strong>TypeScript</strong> tem trabalhado bastante para “tipar” todas as bibliotecas <strong>JavaScript</strong> existentes. Existe um projeto chamado <a href="https://github.com/borisyankov/DefinitelyTyped" target="_blank" rel="noopener">DefinitelyTyped</a> do qual eu sou um dos administradores que mantém a maior coleção de arquivos <strong>JavaScript</strong> tipados para <strong>TypeScript</strong>. Se você der uma olhada no <a href="http://www.tsdpm.com" target="_blank" rel="noopener">www.tsdpm.com</a> verá que é possível recuperar estas definições via <a href="https://npmjs.org/package/tsd" target="_blank" rel="noopener">linha de comando</a> ou <a href="http://www.nuget.org/packages?q=definitelytyped" target="_blank" rel="noopener">NuGet</a>.</p>
<h2 id="Melhores-ferramentas"><a href="#Melhores-ferramentas" class="headerlink" title="Melhores ferramentas"></a>Melhores ferramentas</h2><p>A Microsoft a tempos tem defendido a idéia de que as linguagens de programação e as ferramentas de desenvolvimento devem trabalhar juntas para criar uma boa experiência de desenvolvimento. Como já foi dito com <strong>TypeScript</strong> os fornecedores de <em>Editores</em> e <em>IDEs</em> tem a possibilidade de prover para o desenvolvedor ferramentas que proporcionam uma experiência de desenvolvimento em <strong>TypeScript</strong> muito rica incluindo a verificação de tipos e interfaces, navegação de código, refatoração, debug, intelliSense entre outros. A própria Microsoft está disponibilizando um plugin para o <em>Visual Studio 2012</em> com muitos destes recursos.</p>
<p><img src="https://raw.github.com/Diullei/diullei.github.com/master/_site/images/TypeScript_Parte1/0008.png" alt=""></p>
<p>Existem ainda outros editores no mercado trabalhando no suporte ao <strong>TypeScript</strong>. Veja mais neste <a href="http://blogs.msdn.com/b/interoperability/archive/2012/10/01/sublime-text-vi-emacs-typescript-enabled.aspx" target="_blank" rel="noopener">link</a>.</p>
<h2 id="TypeScript-vs-CoffeeScript"><a href="#TypeScript-vs-CoffeeScript" class="headerlink" title="TypeScript vs CoffeeScript"></a>TypeScript vs CoffeeScript</h2><p>É fácil ouvir que o <strong>TypeScript</strong> tem muitas semelhanças com <a href="http://coffeescript.org/" target="_blank" rel="noopener"><strong>CoffeeScript</strong></a>. Ambos são destinados a fazer a mesma coisa: tornar o desenvolvimento <strong>JavaScript</strong> mais fácil. O <strong>CoffeeScript</strong> simplifica o <strong>JavaScript</strong> definindo uma nova sintaxe e permitindo ao desenvolvedor fazer muitas coisas de forma simples. Já o <strong>TypeScript</strong> é um superconjunto do <strong>JavaScript</strong> e tenta facilitar as coisas dando ao <strong>JavaScript</strong> mais estrutura principalmente provendo os recursos de tipagem estática. Um ponto importante a ser notado é que o <strong>TypeScript</strong> traz uma sintaxe com uma curva de aprendizado pequena para o desenvolvedor <strong>JavaScript</strong> o que não acontece com o <strong>CoffeeScript</strong> que traz uma sintaxe bem diferente e que o <strong>CoffeeScript</strong> não tem checagem estatica de tipos.</p>
<p>Se você gosta de <em>Ruby</em> você provavelmente vai gostar mais do <strong>CoffeeScript</strong> do que do <strong>TypeScript</strong>. Se você gosta de <em>C++/Java/C#</em> o <strong>TypeScript</strong> será mais familiar.</p>
<p>Para uma pequena demonstração segue abaixo um exemplo do mesmo código que estávamos trabalhando nos tópicos anteriores portado para <strong>CoffeeScript</strong>:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mensagem</span></span></span><br><span class="line">  <span class="symbol">constructor:</span> @texto -&gt;</span><br><span class="line"></span><br><span class="line">  <span class="symbol">exibe:</span> -&gt;</span><br><span class="line">    <span class="string">"Olá, <span class="subst">#&#123;@texto&#125;</span>!"</span></span><br><span class="line"></span><br><span class="line">mensagem = new Mensagem <span class="string">"Mundo"</span></span><br><span class="line">button = document.createElement <span class="string">"button"</span></span><br><span class="line">button.innerText = <span class="string">"Diga Olá!"</span></span><br><span class="line"></span><br><span class="line">button.onclick = -&gt;</span><br><span class="line">  alert mensagem.exibe()</span><br><span class="line"></span><br><span class="line">document.body.appendChild button</span><br></pre></td></tr></table></figure>
<h2 id="TypeScript-vs-Dart"><a href="#TypeScript-vs-Dart" class="headerlink" title="TypeScript vs Dart"></a>TypeScript vs Dart</h2><p>O <strong>TypeScript</strong> e o <strong>Dart</strong> são semelhantes na medida em que podem gerar <strong>JavaScript</strong>, mas o <strong>Dart</strong> é muito mais do que apenas geração de código <strong>JavaScript</strong>. O <strong>Dart</strong> pretende ser uma alternativa ao <strong>JavaScript</strong> com uma linguagem totalmente nova tendo sua própria <em>VM</em> com a proposta de um melhor desempenho. O <strong>Dart</strong> pode ser executado diretamente no navegador utilizando um plugin, no servidor utilizando sua própria <em>VM</em> ou em qualquer ambiente <strong>JavaScript</strong> utilizando o seu código <strong>JavaScript</strong> gerado. Já o <strong>Typescript</strong> sempre é traduzido para <strong>JavaScript</strong>.</p>
<h2 id="Por-que-utilizar-TypeScript"><a href="#Por-que-utilizar-TypeScript" class="headerlink" title="Por que utilizar TypeScript"></a>Por que utilizar TypeScript</h2><p>Se o <strong>CoffeeScript</strong> e o <strong>Dart</strong> são pré-processadores que fazem o mesmo que o <strong>TypeScript</strong> se propõe por que você deveria adotar o <strong>TypeScript</strong>? Entenda que o <strong>TypeScript</strong> foi construído foco em trabalhar junto com um <em>Editor</em> ou <em>IDE</em> fornecendo fortes recursos para o desenvolvedor e facilitando em muito sua vida.</p>
<p>Vamos listar abaixo alguns pontos positivos relacionados a adoção do <strong>TypeScript</strong>.</p>
<ul>
<li>Por ser um superconjunto do <strong>JavaScript</strong> permite uma fácil transição de código <strong>JavaScript</strong> para código <strong>TypeScript</strong>.</li>
<li>Código <a href="http://typescript.codeplex.com/license" target="_blank" rel="noopener">open source</a>.</li>
<li>A tipagem estática do <strong>TypeScript</strong> ajuda o desenvolvedor a detectar erros durante o desenvolvimento. Estes recursos são muito bem vindos para nós desenvolvedores. Antes precisávamos partir para soluções como: <a href="http://scriptsharp.com/" target="_blank" rel="noopener">Script#</a>, <a href="https://developers.google.com/web-toolkit/" target="_blank" rel="noopener">Google GWT</a> que também tentam resolver estes problemas de tipagem estática.</li>
<li>Promessa de grandes recursos como refatoração, navegação no código por referência dos tipos, debug, analises de código entre outros por parte dos <em>Editores</em> e <em>IDEs</em> como o <em>Visual Studio 2012</em> por exemplo.</li>
<li>Possibilidade de trabalhar com <em>OO</em> (<em>classes</em>, <em>interfaces</em>, <em>herança</em> etc…) sem ter que manipular diretamente os <em>protótipos</em> <strong>JavaScript</strong> para reproduzir este comportamento.</li>
<li>Roda em qualquer ambiente com suporte a <strong>JavaScript</strong> <em>ES3</em> ou superior. Isso permitiu por exemplo uma fácil distribuição do <strong>TypeScript</strong> em <em>Node.JS</em>. Assim o <strong>TypeScript</strong> pode ser fácilmente instalado em ambientes como <em>Linux</em> e <em>MacOS</em>.</li>
<li>O <em>Windows 8</em> está chegando pesado permitindo desenvolvimento de aplicativos utilizando <em>HTML/CSS/JavaScript</em>. Os futuros desenvolvedores de aplicativos para <em>Windows 8</em> irão provavelmente utilizar <strong>TypeScript</strong> para este trabalho.</li>
</ul>
<p>Se todo o conteúdo apresentado até aqui foi o suficiente para convence-lo a aprender esta nova linguagem espero ver você nos próximos posts.</p>
<p>Abraços!</p>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Testando o ultimo build do TypeScript no VS]]></title>
      <url>http://diullei.com/2013/02/02/Testando-o-ultimo-build-do-TypeScript-no-VS/</url>
      <content type="html"><![CDATA[<h2 id="Introducao"><a href="#Introducao" class="headerlink" title="Introdução"></a>Introdução</h2><p>O objetivo deste post é mostrar como você pode atualizar a versão do TypeScript instalada na sua máquina com a ultima versão em desenvolvimento. Isso é legal caso você esteja acompanhando o que o time do TypeScript está preparando para as novas versões. Você vai precisar atualizar um arquivo chamado <code>typescriptSerivces.js</code>. Vamos ver como isso pode ser feito.</p>
<h2 id="Obtendo-uma-nova-versao-do-arquivo-typescriptSerivces-js"><a href="#Obtendo-uma-nova-versao-do-arquivo-typescriptSerivces-js" class="headerlink" title="Obtendo uma nova versão do arquivo typescriptSerivces.js"></a>Obtendo uma nova versão do arquivo typescriptSerivces.js</h2><h3 id="Primeira-opcao-Usando-o-“LKG”"><a href="#Primeira-opcao-Usando-o-“LKG”" class="headerlink" title="Primeira opção: Usando o “LKG”"></a>Primeira opção: Usando o “LKG”</h3><p>LKG é uma sigla que significa “Last Known Good” que significa no nosso contexto algo como “ultimo arquivo bom de que temos conhecimento”. Você pode pegar uma cópia deste arquivo no CodePlex <a href="http://typescript.codeplex.com/SourceControl/BrowseLatest?branch=develop" target="_blank" rel="noopener">aqui</a>, basta navegar até o diretorio <code>bin</code> e baixar o arquivo <code>typescriptSerivces.js</code>.</p>
<h3 id="Compilando-a-ultima-versao-do-TypeScript"><a href="#Compilando-a-ultima-versao-do-TypeScript" class="headerlink" title="Compilando a ultima versão do TypeScript"></a>Compilando a ultima versão do TypeScript</h3><h4 id="Pre-requisitos"><a href="#Pre-requisitos" class="headerlink" title="Pré-requisitos"></a>Pré-requisitos</h4><p>Você vai precisar das seguintes feramentas instaladas na tua máquina:</p>
<ul>
<li><a href="http://git-scm.com/downloads" target="_blank" rel="noopener">Git</a> - Algumas recomendações para instalação do git no windows<ul>
<li>Não instale com a opção de integração com o Windows Explorer a menos que você vá realmente precisar disso.</li>
<li>Selecione a opção <em>Run Git from the Windows Command Prompt</em>.</li>
<li>Selecione <em>Checkout as-is</em> and <em>commit as-is</em></li>
</ul>
</li>
<li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li>
</ul>
<h4 id="Clonando-o-TypeScript"><a href="#Clonando-o-TypeScript" class="headerlink" title="Clonando o TypeScript"></a>Clonando o TypeScript</h4><pre><code>&gt; git clone https://git01.codeplex.com/typescript
</code></pre><p>Isso irá criar um diretório local chamado <code>typescript</code> com o código fonte do projeto.</p>
<h4 id="Selecionar-o-Branch-da-ultima-versao-em-desenvolvimento"><a href="#Selecionar-o-Branch-da-ultima-versao-em-desenvolvimento" class="headerlink" title="Selecionar o Branch da ultima versão em desenvolvimento"></a>Selecionar o <code>Branch</code> da ultima versão em desenvolvimento</h4><pre><code>&gt; cd typescript

&gt; git checkout develop
</code></pre><p>O branch <code>develop</code> é onde encontramos as ultimas alterações de código.</p>
<h4 id="Instalando-as-dependencias-do-projeto"><a href="#Instalando-as-dependencias-do-projeto" class="headerlink" title="Instalando as dependências do projeto"></a>Instalando as dependências do projeto</h4><pre><code>&gt; npm install
</code></pre><p>Isso irá instalar uma ferramenta clamada <a href="https://github.com/mde/jake" target="_blank" rel="noopener">jake</a> a qual é usada no build do TypeScript.</p>
<h4 id="Compilando-o-TypeScript"><a href="#Compilando-o-TypeScript" class="headerlink" title="Compilando o TypeScript"></a>Compilando o TypeScript</h4><pre><code>&gt; .\node_modules\.bin\jake local 
</code></pre><blockquote>
<p>NOTA: Sempre que você quiser pegar a ultima versão do código do TypeScript para compilar localmente você pode apagar o folder <code>typescript</code> e repetir todo o procedomento acima ou simplesmente executar o comando <code>git pull</code> para atualizar seu repositório com as ultimas alterações feitas pelo time do TypeScript.</p>
</blockquote>
<h3 id="Atualizando-o-arquivo-typescriptSerivces-js"><a href="#Atualizando-o-arquivo-typescriptSerivces-js" class="headerlink" title="Atualizando o arquivo typescriptSerivces.js"></a>Atualizando o arquivo typescriptSerivces.js</h3><p>Você vai precisar localizar o diretório local onde onde a extensão do TypeScrit está instalada. Procure por um arquivo chamada <code>typescriptSerivces.js</code> em um diretório localizado em um caminho paredico com:</p>
<p><code>C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\IDE\Extensions\enn4wcm5.z2b\</code></p>
<p>Note que o ultimo diretório chamado <code>enn4wcm5.z2b</code> vai ter nome diferente em cada máquina. Em alguns casos raros você pode ter mais de um subfolde com a instalação do TypeScript. Se você tiver este cenário identifique pela data de criação o mais recente.</p>
<p>Localize o arquivo <code>typescriptSerivces.js</code>, faça um backup e substitua este arquivo pela ultima versão optida no tópico anterior.</p>
<p>Feito isso, reinicie o Visual Studio e divirta-se!</p>
<p>Um grande abraço e até a próxima!</p>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Debugando TypeScript no navegador]]></title>
      <url>http://diullei.com/2012/10/16/Debugando-TyprScript-no-navegador/</url>
      <content type="html"><![CDATA[<h2 id="Introducao"><a href="#Introducao" class="headerlink" title="Introdução"></a>Introdução</h2><p>Existe um recurso bem interessante implementado no Firefox e no Chrome (não sei ao certo quais outros navegadores) chamado <a href="http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/" target="_blank" rel="noopener">Source Maps</a>. Para entender do que se trata tenha em mente um arquivo javascript minificado. Para rastrear um bug no código deste arquivo por exemplo teríamos que usar a versão não minificada do mesmo. Uma vez encontrado o bug este seria corrigido e um novo arquivo minificado seria gerado. Um Source Map é um arquivo de mapeamento que faz um dê-para (no nosso caso) do arquivo minificado com o arquivo real. A partir deste mapeamento o browser consegue realizar o debug no arquivo original(não minificado) em bora a execução real esteja ocorrendo no arquivo minificado.</p>
<p>Até aqui isso não agregou muito por que basta referenciar o arquivo original como dito anteriormente. Uma vez que tenhamos o problema rastreado ou a feature implementada minificamos tudo novamente.</p>
<h3 id="Como-isso-pode-nos-ajudar-no-Debug-de-codigo-TypeScript"><a href="#Como-isso-pode-nos-ajudar-no-Debug-de-codigo-TypeScript" class="headerlink" title="Como isso pode nos ajudar no Debug de código TypeScript?"></a>Como isso pode nos ajudar no Debug de código TypeScript?</h3><p>TypeScrit assim como CoffeeScrit e Dart entre outros são pré-processadores que geram no final das contas código JavaScript. Como a maioria dos pré-processadores tenta melhorar a sintaxe do código na escrita de expressões lambda, iterações, classes, interfaces, heranças e etc, temos uma dissonância entre o código escrito em TypeScript por exemplo com o código JavaScript gerado no final.</p>
<p>Aqui entra em ação o Source Map. Com ele assim como podemos mapear um arquivo minificado com seu arquivo original, podemos também mapear um arquivo TypeScript original com seu código final gerado em JavaScript. Isso abre novas possibilidades de debug. Novas ferramentas de debug e refatoração podem ser criadas a partir deste recurso.</p>
<p>É aí que entra o assunto deste artigo. Vou mostrar como debugar TypeScript em um navegador com suporte a Source Maps. No meu caso vamos usar o Chrome.</p>
<h2 id="Habilitando-Source-Map-no-Google-Chrome"><a href="#Habilitando-Source-Map-no-Google-Chrome" class="headerlink" title="Habilitando Source Map no Google Chrome"></a>Habilitando Source Map no Google Chrome</h2><p>Para habilitar o recurso de source maps no Chrome basta acessar Settings e selecionar a caixa “Enable source maps”. Veja na imagem abaixo:</p>
<p><img src="/images/debug_typescript/enable_source_map.png" alt="Valid XHTML"></p>
<p>Feito isso estamos pronto para debugar nosso código.</p>
<h2 id="Criando-o-nosso-codigo-de-testes"><a href="#Criando-o-nosso-codigo-de-testes" class="headerlink" title="Criando o nosso código de testes"></a>Criando o nosso código de testes</h2><p>Para exemplo vamos criar um arquivo com um código TypeScript muito simples. Salve o código abaixo em um arquivo chamado <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">interface IPessoa&#123;</span><br><span class="line">	nome: string;</span><br><span class="line">	sobreNome: string;</span><br><span class="line">	nomeCompleto: () =&gt; string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Pessoa implements IPessoa &#123;</span><br><span class="line">	nome: string;</span><br><span class="line">	</span><br><span class="line">	sobreNome: string;</span><br><span class="line"></span><br><span class="line">	nomeCompleto(): string &#123;</span><br><span class="line">		return &quot;Nome: &quot; + this.nome + &quot; &quot; + this.sobreNome;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var pessoa = new Pessoa();</span><br><span class="line">pessoa.nome = &quot;Diullei&quot;;</span><br><span class="line">pessoa.sobreNome = &quot;Gomes&quot;;</span><br><span class="line"></span><br><span class="line">var element = document.getElementById(&apos;content&apos;);</span><br><span class="line"></span><br><span class="line">element.innerHTML = pessoa.nomeCompleto();</span><br></pre></td></tr></table></figure></p>
<p>Agora crie um arquivo chamado <figure class="highlight plain"><figcaption><span>e coloque o código abaixo:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta&gt;</span><br><span class="line">	&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;div id=&quot;content&quot;&gt;&lt;/div&gt;</span><br><span class="line">	&lt;script type=&quot;text/javascript&quot; src=&quot;script.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>Estes arquivos precisam estar no mesmo folder.</p>
<h2 id="Source-Maps-para-TypeScript"><a href="#Source-Maps-para-TypeScript" class="headerlink" title="Source Maps para TypeScript"></a>Source Maps para TypeScript</h2><p>Tendo nosso pequeno projeto em mãos agora precisamos gerar nosso arquivo source map. Felizmente o time que trabalha no TypeScript fez um trabalho muito bom incluindo um gerador de source maps no <a href="http://typescript.codeplex.com/SourceControl/changeset/view/d397c54a55db#src%2fcompiler%2fsourceMapping.ts" target="_blank" rel="noopener">compilador do TypeScript</a>. Embora não seja documentado no help do utilitário de compilação do TypeScript para gerar o arquivo sourcemap basta executar a compilação da seguinte forma: <figure class="highlight plain"><figcaption><span>--sourcemap script.ts```. Feito isso repare que um arquivo chamado ```script.js.map``` é gerado. Repare também que este arquivo é referenciado no final do arquivo script.js gerado pelo compilador como na linha abaixo:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```//@ sourceMappingURL=script.js.map</span><br></pre></td></tr></table></figure></p>
<p>Tendo compilado o arquivo script.ts agora basta abrir a página <code>index.html</code> no Chrome. Coloque um breakpoint no código para ver o debug do TypeScript em ação. Veja na imagem abaixo:</p>
<p><img src="/images/debug_typescript/debug.png" alt="Valid XHTML"></p>
<h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>Como vimos o recurso Source Maps abre muitas possibilidades no tocante a rastreamento de código.</p>
<ul>
<li>Para saber mais sobre Source Maps acesse <a href="http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/" target="_blank" rel="noopener">http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/</a></li>
<li>Para saber mais sobre TypeScript acesse <a href="http://diullei.github.com/TypeScript-ptBR/" target="_blank" rel="noopener">http://diullei.github.com/TypeScript-ptBR/</a></li>
</ul>
<p>Um grande abraço e até a próxima!</p>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
            <tag> Chrome </tag>
            
            <tag> SourceMaps </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Introdução ao TypeScript]]></title>
      <url>http://diullei.com/2012/10/12/Introducao-ao-TypeScript/</url>
      <content type="html"><![CDATA[<h2 id="Introducao"><a href="#Introducao" class="headerlink" title="Introdução"></a>Introdução</h2><p>A Microsoft surpreendeu todos a pouco tempo lançando seu próprio pré-processador de JavaScript chamado <a href="http://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a>. Muitos saíram comparando o TypeScript com <a href="http://coffeescript.org/" target="_blank" rel="noopener">CofeeScript</a> chamando o TypeScript de “CoffeeScript da Microsoft”. Se investigarmos mais a fundo veremos que se trata de uma proposta diferente do CoffeeScript a começar pela sintaxe. Não sou programador CoffeeScript (embora já tenha trabalhado com Coffee não me considero um especialista) e por trabalhar com C# achei a curva de aprendizado do TypeScript muito suave. TypeScript nos permite escrever código puramente JavaScript mesclando ou não o código JavaScript convencional com seu incrível poder de “tipagem” e sintaxe amigável para codificação OO (Criação de classes e interfaces, utilização de herança etc).</p>
<p>Não é minha intenção convencer você de que TypeScript é a melhor solução do mundo ou que é melhor do que CoffeeScript. Essas discussões no fim das contas não levam a nada. CoffeeScript tem seu espaço assim como o TypeScript. Se você já programou em alguma linguagem fortemente “tipada” como C#, Java ou C++ provavelmente você irá se sentir bem com os recursos fornecidas pelo TypeScript. Nem preciso dizer que se você programa em Python vai se sentir mais a vontade ao utilizar CoffeeScript do que com TypeScript :)</p>
<p>Iniciei um trabalho de tradução da documentação do TypeScript. Você pode acessar a tradução da página oficial do TypeScript aqui <a href="http://diullei.github.com/TypeScript-ptBR/index.html" target="_blank" rel="noopener">http://diullei.github.com/TypeScript-ptBR/index.html</a>. A documentação estará sendo traduzida no repositório do <a href="https://github.com/organizations/SampaJS" target="_blank" rel="noopener">SampaJS</a> no github e estará sendo disponibilizada em breve.</p>
<p>Vamos a uma breve introdução sobre TypeScript. A intenção é apresentar alguns recursos básicos interessantes sobre a linguagem.</p>
<h2 id="Instalando-o-TypeScript"><a href="#Instalando-o-TypeScript" class="headerlink" title="Instalando o TypeScript"></a>Instalando o TypeScript</h2><p>O compilador do TypeScript é escrito em TypeScript e como o TypeScript compila pra JavaScript ele pode ser executado em qualquer ambiente JavaScript. Assim podemos rodar código TypeScript em qualquer navegador e inclusive no Node.js.</p>
<p>Se você está habituado com o uso do Visual Studio vai ficar feliz! rs… é possível instalar um plugin no Visual Studio 2012 para trabalhar com TypeScript. Se você costuma utilizar Node.js vai se sentir mais a vontade utilizando o TypeScript no Node.js.</p>
<p>Para ver como instalar o TypeScript no Node.js ou no Visual Studio acesse o link: <a href="http://diullei.github.com/TypeScript-ptBR/#Download" target="_blank" rel="noopener">http://diullei.github.com/TypeScript-ptBR/#Download</a>.</p>
<p>Se você quiser seguir este artigo sem ter o trabalho de instalar o TypeScript você pode utilizar o TypeScript Playground. Trata-se de um compilador online onde podemos experimentar o TypeScript.</p>
<h2 id="Direto-ao-codigo"><a href="#Direto-ao-codigo" class="headerlink" title="Direto ao código"></a>Direto ao código</h2><p>Para entender como as coisas funcionam vamos criar um código JavaScript bem simples. Este código será alterado no decorrer deste artigo e aos poucos irei apresentar alguns recursos do TypeScript.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saudacao</span>(<span class="params">pessoa</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"Olá "</span> + pessoa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> alguem = <span class="string">"Diullei Gomes"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(saudacao(alguem));</span><br></pre></td></tr></table></figure>
<p>Crie um arquivo chamado saudacao.ts e salve com o código acima. Aqui repare que o arquivo TypeScript tem extensão “.ts”. Repare também que este código é um código JavaScript puro. Iremos alterar este código aos poucos.</p>
<p>Execute <figure class="highlight plain"><figcaption><span>saudacao.ts```(Se você instalou a versão Node.js) e veja que será criado um arquivo saudacao.js. Sempre que compilamos um arquivo ".ts" o compilador do TypeScript gera um arquivo ".js". Se você estiver utilizando o Visual Studio verá que o arquivo ".js" é criado automáticamente sempre que o projeto é compilado.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">O JavaScript é uma linguagem sem tipagem e por isso podemos passar para a função &quot;saudacao&quot; um numero ou uma expressão como argumento. Embora tenhamos criado o código para receber uma string com um nome este poderá receber qualquer coisa como argumento. É claro que com uma validação extra conseguimos evitar que argumentos que não sejam do tipo string sejam passados para a função. No entanto vamos utilizar um recurso do TypeScript chamado de &quot;Type anotation&quot; para validar esta passagem de argumento. Altere o código da função &quot;saudacao&quot; como no código abaixo:</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">function saudacao(pessoa: string)&#123;</span><br><span class="line">	return &quot;Olá &quot; + pessoa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var alguem = &quot;Diullei Gomes&quot;;</span><br><span class="line"></span><br><span class="line">document.body.innerHTML = saudacao(alguem);</span><br></pre></td></tr></table></figure></p>
<p>Agora veja que se tentarmos passar um array como argumento o compilador do TypeScrit irá acusar erro.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saudacao</span>(<span class="params">pessoa: string</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"Olá "</span> + pessoa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> alguem = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(saudacao(alguem));</span><br></pre></td></tr></table></figure>
<p>O que fizemos foi dizer ao TypeScript que nossa função “saudacao” recebe um argumento do tipo “string”. Node que mesmo tendo o código com erro o TypeScrit irá gerar o arquivo “.js”. O TypeScript sempre irá compilar o arquivo, no entanto sempre que existirem erros ele irá alertar estes erros a fim de informar que alguma coisa poderá não funcionar da forma esperada. Isso é feito para permitir integração com código JavaScript convencional.</p>
<h2 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h2><p>Vamos avançar e introduzir o uso de interfaces. Veja o código abaixo:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface Pessoa &#123;</span><br><span class="line">	primeiroNome: string;</span><br><span class="line">	ultimoNome: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saudacao</span>(<span class="params">pessoa: Pessoa</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"Olá "</span> + pessoa.primeiroNome + <span class="string">" "</span> + pessoa.ultimoNome;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> alguem = &#123; <span class="attr">primeiroNome</span>: <span class="string">"Diullei"</span>, <span class="attr">sobreNome</span>: <span class="string">"Moura"</span>, <span class="attr">ultimoNome</span>: <span class="string">"Gomes"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(saudacao(alguem));</span><br></pre></td></tr></table></figure>
<p>No codigo acima criamos uma interface que define dois campos: primeiroNome e ultimoNome. Não vou me aprofundar no conceito de interface mais entenda que interfaces definem contratos. Repare que alteramos a assinatura da função “saudacao” para receber um argumento do tipo “Pessoa”. Agora o compilador do TypeScript irá exigir que o argumento da função obedeça o contrato definido na interface, ou seja, precisamos passar um objeto que possua uma propriedade chamada “primeiroNome” com um valor do tipo string e uma propriedade chamada “ultimoNome” com um valor do tipo string. Veja que o objeto “alguem” que estamos passando também possui uma propriedade chamada “sobreNome” que não interfere de maneira alguma no código já que este objeto obedece a interface. Teríamos um erro se omitíssemos um dos campos exigidos pela interface.</p>
<h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h2><p>Vamos alterar o código acima agora e utilizar o conceito de classes. Veja o código:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pessoa</span> </span>&#123;</span><br><span class="line">	primeiroNome: string;</span><br><span class="line">	ultimoNome: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saudacao</span>(<span class="params">pessoa: Pessoa</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"Olá "</span> + pessoa.primeiroNome + <span class="string">" "</span> + pessoa.ultimoNome;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> alguem = &#123; <span class="attr">primeiroNome</span>: <span class="string">"Diullei"</span>, <span class="attr">sobreNome</span>: <span class="string">"Moura"</span>, <span class="attr">ultimoNome</span>: <span class="string">"Gomes"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(saudacao(alguem));</span><br></pre></td></tr></table></figure>
<p>Se você tentar executar o código acima vai ter um erro. O erro ocorre por que diferente da interface quando usamos uma classe o objeto esperado pela função tem que seguir exatamente as caracteristicas definidas na classe ou ser um tipo que herde desta classe. Se tirarmos a propriedade sobreNome do objeto “alguem” o código irá compilar sem erro.</p>
<p>O que foi apresentado até aqui é bem simples mais introduz bem a intenção do TypeScript. Para saber mais acesse a documentação oficial. Estou trabalhando na tradução desta documentação e logo estarei divulgando o link de acesso.</p>
<h2 id="O-argumento-“declare”"><a href="#O-argumento-“declare”" class="headerlink" title="O argumento “declare”"></a>O argumento “declare”</h2><p>Uma caracteristica interessante do TypeScript e a possibilidade de declarar variáveis que não serão geradas no momento da compilação. Isso ajudar a definir objetos que irão existir no ambiente de execução mais que não existem código. Assim não teremos erro de compilação. Um exemplo seria a utilização do jquery “$” em um browser. Ao escrever o código abaixo o TypeScrit irá acusar erro por não termos declarado o objeto “document”.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'body'</span>).append(<span class="string">'teste'</span>);</span><br></pre></td></tr></table></figure>
<p>Para evitar que tenhamos erro podemos declarar uma variável “fantasma” que só servirá para garantir a compilação. Esta variável não será gerada pelo compilador e por isso precisamos ter certeza de que neste nosso caso o código será executado em um ambiente no qual o jquery esteja referenciado. Veja o exemplo:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="keyword">var</span> $: any;</span><br><span class="line"></span><br><span class="line">$(<span class="string">'body'</span>).append(<span class="string">'teste'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Tipos"><a href="#Tipos" class="headerlink" title="Tipos"></a>Tipos</h2><p>o TypeScript mantém os tipos nativos do JavaScript: number, string, bool entre outros e introduz um tipo novo chamado any. O tipo any é utilizado para representar um valor JavaScript qualquer. Trata-se de um tipo dinâmico que não é validado pelo compilador do TypeScript, ou seja, se você tentar invocar uma função “xyz()” de um objeto “a” do tipo “any” o compilador não irá verificar se o objeto “a” possui realmente a função “xyz()”.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a: any;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.xyz());</span><br></pre></td></tr></table></figure>
<blockquote>
<p>NOTA: qualquer variável declarada sem um tipo definido será automaticamente classificada pelo TypeScript como uma variável do tipo “any”.</p>
</blockquote>
<h2 id="Funcoes"><a href="#Funcoes" class="headerlink" title="Funções"></a>Funções</h2><p>Com TypeScript podemos definir exatamente os argumentos e o retorno de uma função. Veja o código abaixo:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minhaFuncao: <span class="function">(<span class="params">a: number, b: string</span>) =&gt;</span> string;</span><br><span class="line"></span><br><span class="line">minhaFuncao = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="string">''</span>; &#125;;</span><br><span class="line"></span><br><span class="line">minhaFuncao(<span class="number">1</span>, <span class="string">"arg2"</span>);</span><br></pre></td></tr></table></figure>
<p>Vamos entender o código acima. Usando a notação de tipos do TypeScript definimos uma variável chamada “minhaFuncao” para receber como valor uma função que tenha 2 argumentos um numero e uma string e definimos o retorno desta função para ser do tipo string. Na segunda linda de código foi adicionado o valor “function(){ return ‘’; }” a esta variável. </p>
<p>Até aqui não temos nenhum erro de compilação por que não foram definidos os argumentos desta função e o TypeScript irá validar o tipo dos argumentos passados para a função apenas quando esta função for invocada.</p>
<p>Tente alterar o valor do retorno da função para um tipo diferente do tipo “string” ou alterar o tipo dos argumentos passados na terceira linha quando invocamos a função e verá que o TypeScript acusará erro. Ele vai tentar sempre garantir que a interface da função definida na primeira linha seja obedecida.</p>
<p>Esse recurso de tipagem de funções fornecido pelo TypeScript é muito interessante quando queremos definir o tipo de uma função de “callback” na assinatura de uma função qualquer. Veja abaixo um exemplo de uma função chamada “ajax” que define o tipo do segundo argumento como uma função de “callback” que tenha um argumento de qualquer tipo e retorne um valor do tipo string:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url: string, callback: (data: any</span>) =&gt; <span class="title">string</span>) </span>&#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>Apresentei apenas o básico sobre TypeScript. Se você gostou do que viu sugiro a leitura da <a href="http://go.microsoft.com/fwlink/?LinkId=267238" target="_blank" rel="noopener">documentação</a>. Espero que tenham aproveitado o artigo.</p>
<p>Até a próxima!</p>
]]></content>
      
        <categories>
            
            <category> TypeScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript NoConflict]]></title>
      <url>http://diullei.com/2012/07/29/JavaScript-NoConflict/</url>
      <content type="html"><![CDATA[<p>Você já deve ter visto exemplos de código <em>JQuery</em>, <em>Underscore</em>, <em>Backbone</em> ou outros que utilizassem um método chamado <code>noConflict()</code>. Vamos entender para que serve este método.</p>
<p>Como o próprio nome já diz este método é colocado na biblioteca para permitir que seu código coexista com outros códigos sem a ocorrência de conflitos. </p>
<p>Vamos a um exemplo utilizando duas bibliotecas que utilizam o mesmo nome:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// libA</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">exports</span>)</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">LibA</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">	LibA.prototype.Execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'lib A'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	exports.$ = <span class="keyword">new</span> LibA();</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// libB</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">exports</span>)</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">LibB</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">	LibB.prototype.Execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'lib B'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	exports.$ = <span class="keyword">new</span> LibB();</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line">$.Execute();</span><br><span class="line"><span class="comment">//=&gt; lib B</span></span><br></pre></td></tr></table></figure>
<p>Note que no exemplo acima estamos criando duas bibliotecas e dando a elas o mesmo alias <code>$</code>. Quando a libA é criada ela cria uma instância global chamada $. Caso executemos $.Execute() teremos como resultado o texto <code>lib A</code> no console. Mais veja que logo em seguida criamos a libB. A libB também está utilizando o mesmo nome para sua instância global <code>$</code> fazendo com que a instância da libA seja sobrescrita. Assim quando chamamos $.Execute() temos como resultado o texto <code>lib B</code>.</p>
<p>Uma forma elegante de permitir que o problema acima seja contornado é utilizar um método <code>noConflict()</code>. Veja o exemplo reescrito:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib A</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">exports</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> oldLib = exports.$;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">LibA</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">	LibA.prototype.Execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'lib A'</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	LibA.prototype.noConflict = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		exports.$ = oldLib;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	exports.$ = <span class="keyword">new</span> LibA();</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// lib B</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">exports</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> oldLib = exports.$;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">LibB</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">	LibB.prototype.Execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'lib B'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	LibB.prototype.noConflict = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		exports.$ = oldLib;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	exports.$ = <span class="keyword">new</span> LibB();</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line">$libB = $.noConflict();</span><br><span class="line"></span><br><span class="line">$.Execute();</span><br><span class="line"><span class="comment">//=&gt; lib A</span></span><br><span class="line"></span><br><span class="line">$libB.Execute();</span><br><span class="line"><span class="comment">//=&gt; lib B</span></span><br></pre></td></tr></table></figure>
<p>Note que no exemplo acima fizemos em libB um ‘backup’ do valor de <code>$</code> antes de altera-lo. Adicionamos uma função chamada <code>noConflict()</code> com o objetivo de restaurar o antigo valor de <code>$</code> e retornar a propria libB como resultado. Isso permite a quem estiver utilizando o código renomear a instância de libB. Veja que no código acima alteramos o nome de <code>$</code> para $libB.</p>
<p>Usando este artificio poderíamos também fazer com que 2 ou mais versões de uma mesma biblioteca coexistissem no mesmo código.</p>
<p>Seguem algumas referências a trechos de códigos reais que utilizam este padrão:</p>
<p><strong>jQuery</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">_$ = <span class="built_in">window</span>.$,</span><br><span class="line">...</span><br><span class="line">noConflict: <span class="function"><span class="keyword">function</span>(<span class="params"> deep </span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ( <span class="built_in">window</span>.$ === jQuery ) &#123;</span><br><span class="line">		<span class="built_in">window</span>.$ = _$;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ( deep &amp;&amp; <span class="built_in">window</span>.jQuery === jQuery ) &#123;</span><br><span class="line">		<span class="built_in">window</span>.jQuery = _jQuery;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> jQuery;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><strong>Backbone</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">var</span> previousBackbone = root.Backbone;</span><br><span class="line">...</span><br><span class="line">Backbone.noConflict = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    root.Backbone = previousBackbone;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><strong>Underscore</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">var</span> previousUnderscore = root._;</span><br><span class="line">...</span><br><span class="line">_.noConflict = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    root._ = previousUnderscore;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p>Esses são só alguns exemplos.</p>
<p>Abraços!</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Lendo arquivos com Nodejs]]></title>
      <url>http://diullei.com/2012/07/18/Lendo-arquivos-com-Nodejs/</url>
      <content type="html"><![CDATA[<p>Existem algumas formas diferentes de ler arquivos usando node.js. Existem métodos síncronos e métodos assíncronos que nos permitem realizar este trabalho. Vou exibir e explicar estas diversas formas no decorrer deste post.</p>
<p>Vamos ao nosso primeiro exemplo:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'TEST.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">"Could not open file: %s"</span>, err);</span><br><span class="line">        process.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Precisamos primeiro de tudo carregar o módulo fs pois é a partir deste módulo que teremos acesso aos métodos de leitura e escrita de arquivos. Logo em seguida fazemos uma chamada ao método: <a href="http://nodejs.org/docs/v0.4.8/api/fs.html#fs.readFile" target="_blank" rel="noopener">fs.readFile</a>. Esta função recebe na assinatura o nome do arquivo, um parâmetro opcional que define o encoding que será utilizado durante a leitura do arquivo e um método de callback que será utilizado para manipular os dados lidos do disco. Esse método recebe 2 parâmetros <em>err</em> e <em>data</em>. Sempre que ocorrer um erro durante a leitura do arquivo o parâmetro <em>err</em> virá preenchido com as informações referente ao erro. Se o parametro <em>err</em> vier vazio significa que a leitura do arquivo ocorreu sem problemas e então poderemos manipular o pârametro <em>data</em> que possui o conteúdo do arquivo que está sendo lido. Note que fazemos primeiro a verificação de erros antes de prosseguir com a manipulados dos dados.</p>
<p>Vamos ver o resultado deste código:</p>
<p><img src="/images/lendo_arquivos/Capture_2012-07-18_203709.png" alt="Valid XHTML"></p>
<p>Veja que quando escrevemos o conteúdo de <em>data</em> no console vemos muitos números estranhos. Esse conteúdo é totalmente diferente do arquivo que estou tentando ler. A documentação nos passa uma dica do que está ocorrendo:</p>
<blockquote>
<p>If no encoding is specified, then the raw buffer is returned.</p>
</blockquote>
<p>Ou seja, se não passarmos um valor para o parâmetro encoding (segundo parâmetro da função readFile) o resultado é retornado da forma em que está gravado no disco. </p>
<p>O node nos dá ainda a chance de utilizar o método <a href="http://nodejs.org/docs/v0.4.8/api/buffers.html#buffer.toString" target="_blank" rel="noopener">toString</a> no buffer(variável que contém o resultado da leitura do arquivo) passando como parâmetro o encoding desejado.</p>
<p>Vejamos os exemplos abaixo:</p>
<p><em>passando o encoding</em>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'TEST.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">"Could not open file: %s"</span>, err);</span><br><span class="line">        process.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/lendo_arquivos/Capture_2012-07-18_203739.png" alt="Valid XHTML"></p>
<p><em>usando o método toString(…)</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'TEST.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">"Could not open file: %s"</span>, err);</span><br><span class="line">        process.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">console</span>.log(data.toString(<span class="string">'utf8'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><img src="/images/lendo_arquivos/Capture_2012-07-18_203850.png" alt="Valid XHTML"></p>
<p>A decisão sobre o tipo de encoding utilizar vai depender de que manipulação precisaremos realizar com o conteúdo do arquivo que estamos lendo. Se queremos enviar este conteúdo pela rede para um cliente manter o buffer do jeito que está armazenado no disco é a melhor escolha. Desse jeito podemos utilizar a propriedade length para para pegar o tamanho do arquivo em bytes por exemplo. Isso é muito útil quando queremos por exemplo enviar o tamanho do nosso arquivo no <em>Content-Length</em> no cabeçalho HTTP.</p>
<p>Se o que queremos fazer é manipulação de strings a melhor escolha é passar um encoding.</p>
<p>Um ponto importante a se notar é que da forma em que estamos lendo o arquivo temos os dados do arquivo todo armazenado em memória. Em algum momento o garbage collector irá decidir por remover estes dados da memória caso não exista mais nenhuma referência para o mesmo. Outro ponto é que esta operação é uma operação assíncrona.</p>
<p>Vamos ver agora uma implementação síncrona de leitura de arquivos utilizando o método <a href="http://nodejs.org/docs/v0.4.8/api/fs.html#fs.readFileSync" target="_blank" rel="noopener">fs.readFileSync</a>. Este método bloqueia o bloco de código e não permite que o código avance sem que a leitura do arquivo seja finalizada. Segue um exemplo:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> data = fs.readFileSync(<span class="string">'TEST.txt'</span>, <span class="string">'ascii'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"There was an error opening the file:"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/lendo_arquivos/Capture_2012-07-18_225647.png" alt="Valid XHTML"></p>
<p>Aqui podemos destacar duas grandes diferenças. A primeiro é que não temos mais o nosso método de callback. Não precisamos mais dele já que a execução da leitura será realizada de forma síncrona. A outra diferença é que precisamos gerenciar as exeções por nós mesmo, por isso colocamos o código dentro de um bloco <em>try…catch</em>.</p>
<p>Até agora vimos métodos de leitura que funcionam muito bem para leitura de arquivos de tamanho razoável. Como todos os dados do arquivo são armazenados por completo na memória se quiséssemos ler um arquivo com alguns <em>gigas</em> de tamanho por exemplo teríamos alguns sérios problemas. Para essa situação de leitura de arquivos maiores iremos utilizar o método <a href="http://nodejs.org/docs/v0.4.8/api/fs.html#fs.createReadStream" target="_blank" rel="noopener">fs.createReadStream</a>. Com esse método podemos ler o arquivo definindo um tamanho de memória máximo a ser utilizado. As opções de configuração para utilização deste método são:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">	flags: <span class="string">'r'</span>,</span><br><span class="line">	encoding: <span class="literal">null</span>,</span><br><span class="line">	fd: <span class="literal">null</span>,</span><br><span class="line">	mode: <span class="number">0666</span>,</span><br><span class="line">	bufferSize: <span class="number">64</span> * <span class="number">1024</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Os atributos principais nos quais devemos nos concentrar é o encoding e o bufferSize. Com o atributo bufferSize dizemos o volume de dados que será lido por vez. O valor padrão como exibido acima é 64 kb. Como esse método é assíncrono nós iremos manipular o resultado monitorando alguns eventos específicos. Vamos a um exemplo:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> read_stream = fs.createReadStream(<span class="string">'TEST.txt'</span>, &#123;<span class="attr">encoding</span>: <span class="string">'ascii'</span>&#125;);</span><br><span class="line">read_stream.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    process.stdout.write(data);</span><br><span class="line">&#125;);</span><br><span class="line">read_stream.on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"An error occurred: %s"</span>, err)</span><br><span class="line">&#125;);</span><br><span class="line">read_stream.on(<span class="string">"close"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"File closed."</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Repare que temos 3 eventos. <em>data</em> que é chamado cada vez que um trecho do arquivo com o tamanho definido no bufferSize for carregado em memória, <em>error</em> que é chamado sempre que um erro ocorrer durante a leitura e <em>close</em> que será chamado quando a leitura for finalizada. Aqui vale notar que trabalhamos com o arquivo pedaço por pedaço e por isso não usamos console.log(…) para não colocar uma quebra de linha a cada leitura de trecho do arquivo. Usamos no lugar o método process.stdout.write  para que a cada final e trecho de leitura não tenhamos nenhum caracter de quebra de linha inserido alterando o conteúdo do nosso arquivo.</p>
<p>Hoje ficamos por aqui.</p>
<p>Um abraço pra todos!</p>
]]></content>
      
        <categories>
            
            <category> NodeJs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Configurando o Nodejs com o Notepad++]]></title>
      <url>http://diullei.com/2012/07/17/Configurando-o-NodeJs-com-o-Npp/</url>
      <content type="html"><![CDATA[<p>O note pad++ é na minha opinião um excelente editor. É claro, com o Sublime Text 2 na área muita gente deixou de olhar para p Np++ :). Minha dica de hoje é mostrar como configurar o Np++ para executar arquivos javascript usando o nodeJs.</p>
<p>###NodeJs</p>
<p>Caso você não possua o nodejs instalado na sua máquina vá até o site <a href="http://www.nodejs.org/" target="_blank" rel="noopener">http://www.nodejs.org/</a> e faça o download. A instalação é bem simples e você encontra no site toda orientação necessária.</p>
<p>###Configurando o NotePad++ com o NodeJs</p>
<p>Primeiro de tudo será necessário instalalar o plugin <strong>NppExec</strong>. Vá até o menu <strong>Plugins-&gt;Plugin Manager-&gt;Show Plugin Manager</strong>.</p>
<p><img src="/images/npp_node/menu.png" alt="Valid XHTML"></p>
<p>Na aba Avaliable selecione <strong>NppExec</strong> e clique em install. Feito isso reinicie o npp++.</p>
<p><img src="/images/npp_node/install.png" alt="Valid XHTML"></p>
<p>Feito isso vamos configurar o NppExec.</p>
<p>Acesse o menu <strong>Plugins-&gt;NppExec</strong> e selecione <strong>Follow $(CURRENT_DIRECTORY)</strong>.</p>
<p><img src="/images/npp_node/current_dir.png" alt="Valid XHTML"></p>
<p>Em seguida acesse o menu <strong>PLugins-&gt;NppExec-&gt;Execute…</strong>. Na janela que vai aparecer digite:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="string">"$(CURRENT_DIRECTORY)"</span></span><br><span class="line">node $(FILE_NAME)</span><br></pre></td></tr></table></figure>
<p>Clique no botão <strong>Save</strong> e na janela que se abre de o nome “Run” e clique em <strong>Save</strong>. Em seguida basta dar ok.</p>
<p><img src="/images/npp_node/execute.png" alt="Valid XHTML"></p>
<p>Agora vamos configurar um atalho. Vá no menu <strong>Plugins-&gt;NppExec-&gt;Advanced Options</strong></p>
<p><img src="/images/npp_node/advanced_options.png" alt="Valid XHTML"></p>
<p>Selecione o checkbox <strong>Place to the Macros submenu</strong>. Selecione <strong>Run</strong> na combo <strong>Associated script</strong> e dê o nome <strong>Run Nodejs</strong> no campo <strong>Item name</strong>. Em seguida clique no botão <strong>Add/Modify button</strong>. Clique no botão Ok e reinicie o Np++.</p>
<p>Vá no menu <strong>Settings-&gt;Short Mapper</strong>…</p>
<p><img src="/posts/img/npp_node/advanced_options2.png" alt="Valid XHTML"></p>
<p>Selecione <strong>Plugin commands</strong> e localize <strong>Run NodeJs</strong> na lista de nomes. Clique no botão <strong>Modify</strong> e e configure a janela seguinte conforme a imagem abaixo:</p>
<p><img src="/images/npp_node/shortcut.png" alt="Valid XHTML"></p>
<p>Clique em Ok e pronto!</p>
<p>Note que no menu <strong>Macro</strong> irá aparecer o atalho que acabamos de criar.</p>
<p><img src="/images/npp_node/menu2.png" alt="Valid XHTML"></p>
<p>##Testando</p>
<p>Crie um novo arquivo e escreva o seguinte código:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'np++ test!!!'</span>);</span><br></pre></td></tr></table></figure>
<p>Salve o arquivo e tecle o atalho Ctrl+F5.</p>
<p>Se tudo tiver sido configurado corretamente você terá algo como na imagem abaixo:</p>
<p><img src="/images/npp_node/fim.png" alt="Valid XHTML"></p>
<p>OBS.: O arquivo precisa estar salvo para você conseguir executa-lo.</p>
<p>Espero que esta dica seja útil.</p>
<p>Até!</p>
]]></content>
      
        <categories>
            
            <category> NodeJs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeJs </tag>
            
            <tag> Notepad++ </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
